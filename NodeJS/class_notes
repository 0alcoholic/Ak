NodeJS:
------
    - NodeJS is the Server Side Scripting Language.
    - By using NodeJS, we can create the http & tcp servers.
    - In genaral we will develop Node Applications by using JavaScript.
    - Node will support Modules (predefined modules & custom modules).

Modules in NodeJS
-----------------

1. express
    - this module used to develop the web services.


2. body-parser
    - this module used to set the MIME Type.

    Ex.
           json
           xml
           text
           doc
           --
           --
           --
3.mysql
    - this module used to interact with the mysql database.

4.mongodb
    - this module used to interact with the mongodb.

5.http
    - this module used to create the http servers.

6.fs
    - this module used to interact with the flat files.
    Ex.
        static json files
        static xml files
        static text files
            --
            --
            --
7.jwt-simple
    - this module used to maintain the token based authentication system


8.query-string
    - this module used to implement the common queries for databases.


9. multer
    - this module used to handle the multimedia files.


[Note : we can download required modules by using "package.json" file]

[Note : we can install the package.json file by using "npm install"]

[Note : we can start the Node Server by using "npm start"]


Ex_1:
    launch the angular application(index.html)
    by using node server(server.js)


Step 1:
    download the express module by using package.json file.

package.json
------------
{
    "name":"nareshit",
    "version":"1.0.0",
    "dependencies":{
        "express":"latest"
    }
}


Step 2:
    install the package.json file by using following command.

>npm install

Step 3:
    Create the Angular Application.

-----------
NodeJS
    Basic_NodeEx
            index.html
            package.json
            server.js
------------


Step 4:
    Prepare the node script


server.js
---------

//importing the express
var express = require("express");


//create the deployement interface (Node Server Instance)
var app = express();


//deploy the application(Client Application)
app.use(express.static("D:/AJS_Classes/NodeJS/Basic_NodeEx"));

[ when ever we deploy the application, automatically server
  will execute default html (index.html) ]



//assign the port no.
app.listen(8080);
console.log("Server Listening the Port No.8080");



Step 5:
    Start the Server

>npm start


Step 6:
    Launch the Application by using following URL

http://localhost:8080/

Ex_2:
    Reading the data from json file

Ex.
    sample.json

{
    "products":[
        {"p_id":1,"p_name":"p_one","p_cost":10000},
        {"p_id":2,"p_name":"p_two","p_cost":20000},
        {"p_id":3,"p_name":"p_three","p_cost":30000},
        {"p_id":4,"p_name":"p_four","p_cost":40000},
        {"p_id":5,"p_name":"p_five","p_cost":50000}
    ]
}



var express = require("express");
var fs = require("fs");
var app = express();
app.use(express.static("D:/AJS_Classes/NodeJS/Read_StaticData"));
//create the GET Request
app.get("/products",function(req,res){
    fs.readFile("D:/AJS_Classes/NodeJS/Read_StaticData/sample.json",
            function(err,data){
        res.send(data);
    });
});



Ex_3:
    Interacting with the MySQL DataBase.

create the schema(database)
---------------------------
>create schema class_app;

switch to schema(database)
--------------------------
>use class_app;

create the table
----------------
>create table products(p_id integer,
                       p_name varchar(20),
                       p_cost integer);




insert the data
---------------
>insert into products values(111,'p_one',10000);


query the table
---------------
>select * from products;


var express = require("express");
var mysql = require("mysql");
var app = express();
app.use(express.static(__dirname+"/../Read_MySQLData"));


//connection object
var connection = mysql.createConnection({
    "host":"localhost",
    "user":"root",
    "password":"root",
    "database":"class_app"
});


//connect to database.
connection.connect();


//Get Request
app.get("/products",function(req,res){
    connection.query("select * from products",
            function(err,recordsArray,fields){
        res.send(recordsArray);
    });
});



Ex_4:
    Interacting with MongoDB

- MongoDB is the ligth Weigth DataBase Compared to Traditional Databases
  like oracle,mysql,memsql,....

- MongoDB Supports JSON.

- As a MongoDB Developer we can perform the CRUD Operations on JSON.

- MongoDB Follows Client Server Architecture.

Installation Of MongoDB
-----------------------

website   : https://www.mongodb.com/
file name :



Create the Following Folder Structure in C Drive
------------------------------------------------
c:/data/db

Set the Path Environmental variable
-----------------------------------
path = C:\Program Files\MongoDB\Server\3.4\bin





















