- NodeJS is the Server Side Scripting Language.

- By using NodeJS, we can create Web Servers.

- As a Node Developer , we can assign the port numbers to the Server.

- In NodeJS, Application itself acting as a "Server" as well as "Business Logic"

- In general we will create Node Applications by using JavaScript.


Modules in NodeJS


1. mysql
    - used to interact with the mysql database.


2. mongodb
     - used to interact with the mongodb.


3. express
    - used to develop the webservices (Rest API) in NodeJS.



4. jwt-simple
    - used to maintain the token based authentication system.


5. mutler

    - used to handle the multimedia files.


6. http
    - used to create the http servers.


7. fs
    - fs stands for "file system".
    - used to interact with the flat files.

     Ex.

        XML Files
        Text Files
        JSON Files
        --
        --
        --

8. body-parser
    - used to set the MIME Type in Node Applications

    Ex.

        XML

        JSON

        Text

        --
        --
        --


Ex_1.

    Provide the Basic Communication Between AngularJS with NodeJS


Step 1.

    Download the express module by using package.json file.

{
    "name":"nareshit",
    "version":"1.0.0",
    "description":"First Node Example !",

    "dependencies":{
        "express":"^4.15.3"
    }
}
> npm install

[Note. automatically "express" module download to "node_modules" folder]


Step 2.
    Create the Application Directory Structure

---------------------------
Basic_NodeEx

       index.html      (Angular Application)

       package.json    (Dependencies Requirement File)

       server.js       (Node Application)
---------------------------



Step 3.
    Create the Node Server.

server.js
-

//import the express
var express = require("express");


//create the server instance
var app = express();


//Deploy the Client Location to the Server
app.use(express.static(__dirname+"/../Basic_NodeEx"));


//Default Output
app.get("/" , function(req,res){
    res.redirect("/index.html");
});


//Assign the Port No.
app.listen(8080);
console.log("Server Listening the Port No.8080");



Step 4.
    Start the Node Server

>npm start
  (or)
>node server.js



Step 5.

Execute the Following URL in Browser.

https://localhost:8080


Ex_2:
    Reading the Data From Static File(emp.json)


Step 1.
    Create the Directory Structure.

---------------------
Node_ReadStaticData

        package.json (Configuration File)

        index.html   (Angular Application)

        server.js    (Node Application)

        emp.json     (Static File)
---------------------


Step 2.
    Create the Node Configuration File.

package.json
-
{

    "name":"nareshIT",

    "version":"1.0.0",

    "descrition":"Reading the Data From Static File",

    "dependencies":{

        "express":"^4.15.3"
    }
}


[Note. "fs" module is the default module ]

>npm install


Step 3.

Create the Node Application.
server.js
-
var express = require("express");
var fs = require("fs");
var app = express();
app.use(express.static(__dirname+"/../Node_ReadStaticData"));
app.get("/" , function(req,res){
    res.redirect("/index.html");
});
//Create the Rest API
app.get("/static",function(req,res){
    fs.readFile(__dirname+"/emp.json", function(err,data){
        res.send(data.toString());
    });
});
//assign the port no.
app.listen(8080);
console.log("Server Listening the Port No.8080");

Step 4.
    Start the Server.
>npm start


Step 5.
    Create Angular Application (index.html)


Ex_3.
    Communicating with the MySQL DataBase.

var mysql = require("mysql");

//creating the connection object
var connection = mysql.createConnection({
    host:"localhost",
    user:"root",
    password:"root",
    database: "mini_project"
});

//connect to database
connection.connect();

//create REST API.
app.get("/mysql",function(req,res){
    connection.query("select * from emp",function(err,data,fields){
        res.send(data);
    });
});

















