Step 1:
    Create the DataBase with login details.

>create schema poc;
>use poc;
>create table login_details(uname varchar(20),umyslpwd varchar(20));
>insert into login_details values('admin','admin');
>select * from login_details;

---------------------
user     : root
password : root
database : poc
host     : localhost
---------------------


Step 2:
    create the REST Service for login Authentication.

server.js
---------
//import modules
var express = require("express");
var mysql = require("mysql");
var jwt = require("jwt-simple");

//create the node instance
var app = express();

//deploy the angular application (POC)
app.use(express.static(__dirname+"/../POC"));


//connection object.
var connection = mysql.createConnection({
    host:"localhost",
    user : "root",
    password:"root",
    database : "poc"
});

//connect to database.
connection.connect();

var tokensArray = [];

//post request
app.post("/login",function(req,res){
    var uname = req.body.uname;
    var upwd = req.body.upwd;

    connection.query("select uname from login_details
                     where uname='"+uname+"'",
                     function(err,recordsArray,fields){
          if(recordsArray.length>0){
               var token = jwt.encode({'uname':uname},
                           'hr@tcs.com');
               tokensArray.push(token);
               res.send({'login':'success','token':token});
          }else{
            res.send({'login':'fail'});
          }
    });
});


Step 3:
    implement the loginService.


-----------
services
    loginService.js
-----------

app.service("loginService",loginService);
function loginService($http){
    this.authenticate = function(obj){
        return $http.post("http://localhost:8080/login",obj)
            .then((posRes)=>{
                return posRes;
            },(errRes)=>{
                return errRes;
            });
    }
}



Step 4:
    implement the Single Page Application.

--------------------
POC
    templates
        login.html
        home.html

    controllers
        loginController.js
        homeController.js

    app.js

    config.js

    index.html

    bower.json
-----------------------


Step 5:
    Store the token in "local Storage"
    and navigates to home page.

loginController.js
------------------
app.controller("loginController",loginController);

function loginController($scope,
                         loginService,
                         $localStorage,
                         $location) {

    $scope.obj={};

    $scope.login_details = function () {

        loginService.authenticate($scope.obj)
                        .then(function (res) {
            if(res.data.login=="success"){
                $localStorage.poc = res;
                $location.path("/home");
            }else{
                alert("Login Fail !");
            }
        });
    };
};


-------------------------------------
Home Module Implementation
-------------------------------------

Step 6:
    Create the static file
    Ex.
    products.json
    {
        "products":[
                       {"p_id":111,"p_name":"p_one","p_cost":10000},
                       {"p_id":222,"p_name":"p_two","p_cost":20000},
                       {"p_id":333,"p_name":"p_three","p_cost":30000},
                       {"p_id":444,"p_name":"p_four","p_cost":40000},
                       {"p_id":555,"p_name":"p_five","p_cost":50000}
        ]
    }


    Create the table in mysql database.
    >use poc;
    >create table products(p_id integer,p_name varchar(20),p_cost integer);
    >insert into products values(111,'p_one',10000);



    create the collection in mongodb
    >use poc;
    >db.createCollection("products");
    >db.products.insert({"p_id":111,"p_name":"p_one","p_cost":10000});



Step 7:
    Create the Node Services for Home Module.

var fs = require("fs");
app.post("/static",function(req,res){
    var token = req.body.token;
    if(tokensArray[0] == token){
        fs.readFile(__dirname+"/products.json",
                    function(err,data){
            res.send(data);
        });
    }else{
        res.send({"404":"UnAuthorized User !"});
    }
});



/mysql
-------
connection.query("select * from products",
           function (err,recordsArray,fields) {
        res.send(recordsArray);
});

/mongodb
--------
mongoClient.connect("mongodb://localhost:27017/poc",
        function (err,db) {

      db.collection("products").find().toArray(
                function (mongoError,array) {
        res.send(array);
      });
});


Step 8:
    Create the home service

--------------
service
    homeService.js
--------------
app.service("homeService",homeService);
function homeService($http,$localStorage){
    this.getStaticData = function(){
        return $http.post("http://localhost:8080/static",
                {'token':$localStorage.poc.data.token})
                    .then(function(posRes){
            return posRes;
        },function(errRes){
            return errRes;
        });
    };


    this.getMySQLData = function(){
            return $http.post("http://localhost:8080/mysql",{'token':$localStorage.poc.data.token}).then(function(posRes){
                return posRes;
            },function(errRes){
                return errRes;
            });
    }


    this.getMongoData = function(){
            return $http.post("http://localhost:8080/mongodb",{'token':$localStorage.poc.data.token}).then(function(posRes){
                return posRes;
            },function(errRes){
                return errRes;
            });
    }
}



Step 9:
    Create the Controllers

-------------------
controllers
    aboutController.js
    contactController.js
    portfolioController.js
--------------------


Step 10:
    Create the templates

---------------
templates
    about.html
    contact.html
    portfolio.html
    result.html
--------------


Step 11:
    Implement the Nested Routing


Step 12:
    implement the logout functionality

