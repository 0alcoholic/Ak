1. Design the database.
Ex.
    mysql


>create schema poc;

>use poc;

>create table login_details(uname varchar(20),upwd varchar(20));

>insert into login_details values('admin','admin');

>select * from login_details;


2. Implement the Node Application for Authentication

//import express
//rest api
var express = require("express");

//import mysql
//interact with the mysql database.
var mysql = require("mysql");


//import jwt-simple
//to maintain the token based authentication system.
var jwt = require("jwt-simple");


//import body-parser
//to set the MIME Type.
var bodyparser = require("body-parser");


//connection object
var connection = mysql.createConnection({
    host:"localhost",
    user:"root",
    password:"root",
    database : "poc"
});


//connect to database.
connection.connect();


//create array to store the tokens
var tokensArray=[];

//POST Request
app.post("/login",function(req,res){
    var uname = req.body.uname;
    var upwd = req.body.upwd;

    connection.query("select uname from login_details
                      where uname='"+uname+"
                      'and upwd=''+upwd+"'",
    function(err,recordsArray,fields){
        if(recordsArray.length>0){
            var token = jwt.encode({'uname':uname},'hr@nareshit.in');
            tokensArray.push(token);
            res.send({'login':'success','token':token});
        }else{
            res.send({'login':'fail'});
        }
    });
});



3. implement the loginService.

-------
services
    loginService.js
-------
app.service("loginService",loginService);
function loginService($http){
    this.authenicate = function(obj){
        return $http.post("http://localhost:8080/login",obj).then(function(posRes){
            return posRes;
        },function(errRes){
            return errRes;
        });
    }
}

Step 4:
    implement the single page application

----------------
POC
    templates
        login.html
        home.html

    controllers
        loginController.js
        homeController.js

    app.js

    config.js

    index.html

------------------------
login.html
-
<form ng-submit="login_details()">
    <label>Uname.</label>&emsp;&emsp;&emsp;&emsp;
    <input type="text" ng-model="obj.uname">

    <br><br>
    <label>Upwd.<label>&emsp;&emsp;&emsp;&emsp;
    <input type="password" ng-model="obj.upwd">

    <br><br>
    <input type="submit">
</form>


home.html
---------
<h1>{{var_one}}<h1>


loginController.js
-
app.controller("loginController",loginController);
function loginController($scope,loginService,$localStorage,$location){
    $scope.obj={};
    $scope.login_details =  function(){
        loginService.authenticate($scope.obj).then(function(res){
            console.log(res);
        });
    }
}

homeController.js
-
app.controller("homeController",homeController);
function homeController($scope){
    $scope.var_one="Welcome to Home Page !";
}

config.js
---------
app.config(config);
function config($stateProvider,$urlRouterProvider){
    $stateProvider.state("login",{
        url:"/login",
        templateUrl:"templates/login.html",
        controller:"loginController"
    })
    .state("home",{
            url:"/home",
            templateUrl:"templates/home.html",
            controller:"homeController"
    });
    $urlRouterProvider.otherwise("/login");
}

app.js
------
var app = angular.module("app",["ui.router","ngStorage"]);


index.html
----------
<div ui-view></div>

bower.json
----------
{
    "name":"nareshit",
    "dependencies":{
        "angular":"~1.6.0",
        "ngstorage":"latest",
        "angular-ui-router":"~0.2.18"
    }
}

5. implement the Nested Routing keys in home.html file
------------------------------------------------------
<a ui-sref=".contact"><b>Contact</b></a>&emsp;&emsp;&emsp;&emsp;
<a ui-sref=".about"><b>About</b></a>&emsp;&emsp;&emsp;&emsp;&emsp;
<a ui-sref=".portfolio"><b>Portfolio</b></a>&emsp;&emsp;&emsp;&emsp;&emsp;
<button ng-click="logout()">Logout</button>
<br><br>
<div ui-view></div>


6. implement the logout functionality with the help of homeController.js
------------------------------------------------------------------------
app.controller("homeController",homeController);
function homeController($scope,$localStorage,$location) {
    $scope.logout = function () {
        delete $localStorage.poc;
        $location.path("/login");
    };
};


7. implement the interceptors to handle wrong routings
-------------------------------------------------------

    - interceptors will execute before each routing.

    - "$stateChangeStart" is the interceptor used to handle the wrong routings in application.

    - in genaral we will implement interceptors by using "run()" function


app.run(run).config(config);
function run($rootScope,$localStorage,$location) {
    $rootScope.$on("$stateChangeStart",function (event) {
        if(!$localStorage.poc){
            $location.path("/login");
        }
    });
};



8. implement the node services for "static data reading" ,
                                   "mysql interaction",
                                   "mongodb interaction"


app.post("/static",function (req,res) {
    var token = req.body.token;
    if(tokensArray[0]==token){
        fs.readFile(__dirname+"/sample.json",function (err,data) {
            res.send(data);
        });
    }else{
        res.send({"401":"Authentication Failed !"});
    };
});


app.post("/mysql",function (req,res) {
    var token = req.body.token;
    if(tokensArray[0]==token){
       connection.query("select * from products",function (err,recordsArray,fields) {
           res.send(recordsArray);
       });
    }else{
        res.send({"401":"Authentication Failed !"});
    };
});


var poc = mongodb.MongoClient;
app.post("/mongodb",function (req,res) {
    var token = req.body.token;
    if(tokensArray[0]==token){
        poc.connect("mongodb://localhost:27017/poc",function (err,db) {
            db.collection("products").find().toArray(function (mongoError,array) {
                res.send(array);
            });
        });
    }else{
        res.send({"401":"Authentication Failed !"});
    };
});


9. create the homeService

10. create the controllers

    contactController.js
    aboutController.js
    portfolioController.js

11. create the templates

    - contact.html
    - about.html
    - portfolio.html


12. implement the nested routing.







