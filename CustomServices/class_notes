Service
-------
    - services in angularjs, used to share the common business logic to multiple number of controllers.

    - we have two types of services.
        1. predefined services
        2. custom services.

predefined services:
    - the services given by angular framework called as predefined services.

Ex.
    1.$http

    2.$q

    3.$interval

    4.$timeout

    5.$location


custom services:
---------------
    - the services developed by developer based on application requirement called as custom services.
    - in angularjs, we can create the custom services by using following functions
        1. factory()
        2. provider()
        3. service()
        4. value()
        5. constant()

creating the custom service by using factory()
----------------------------------------------

app.factory("my_service",my_service);
function my_service(){
    return "Data From DataBase....";
}


app.controller("ctrl_one",ctrl_one);
function ctrl_one($scope,my_service){
    $scope.var_one = my_service;
}

app.controller("ctrl_two",ctrl_two);
function ctrl_two($scope,my_service){
    $scope.var_two = my_service;
}



creating the custom service by using service()
----------------------------------------------
app.service("my_service",my_service);
function my_service(){
    this.fun_one = function(){
        return "For Controller One !";
    }

    this.fun_two = function(){
        return "For Controller Two !";
    }
}


app.controller("ctrl_one",ctrl_one);
function ctrl_one($scope,my_service){
    $scope.var_one = my_service.fun_one();
}

app.controller("ctrl_two",ctrl_two);
function ctrl_two($scope,my_service){
    $scope.var_two = my_service.fun_two();
}


creating the custom service by using value()
--------------------------------------------

    - as a angular developer we can create the custom service in the form of a "key"&"value" pairs
      by using value()

Ex.
    app.value("db_user","root");

    app.controller("ctrl_one",ctrl_one);
    function ctrl_one($scope,db_user){
        $scope.var_one = db_user;
    }

    app.controller("ctrl_two",ctrl_two);
    function ctrl_two($scope,db_user){
        $scope.var_two = db_user;
    }



creating the custom service by using constant()
--------------------------------------------

    - as a angular developer we can create the custom service in the form of a "key"&"value" pairs
      by using value()

Ex.
    app.constant("db_user","root");

    app.controller("ctrl_one",ctrl_one);
    function ctrl_one($scope,db_user){
        $scope.var_one = db_user;
    }

    app.controller("ctrl_two",ctrl_two);
    function ctrl_two($scope,db_user){
        $scope.var_two = db_user;
    }


creating custom service by using provider()
-------------------------------------------

app.provider("my_service",my_service);
function my_service(){
    this.db_password = "root_one";
    this.$get=function(){
        return this.db_password;
    }
}

app.config(config);
function config(my_serviceProvider){
    my_serviceProvider.db_password = "root_two";
}

factory:
    - can return the services to controllers directly.
    - can interact with the external javascript files.

service:
    - depending on user defined functions to provide the services to controllers.

value:
    - overriding will be happen in custom service with latest value.

constant:
    - overriding won't be happen in custom service with latest value.

provider:
    - depending on "$get" predefined function.
    - can change the values in config phase.



























































