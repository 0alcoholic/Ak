    - Directives will enhance the HTML Capabilities.

    - we have a Two Types Of Directives.

        1.Predefined Directives.

        2.Custom Directives.

    Predefined Directives.
    -
         - The Directives Given By the Framework called as Predefined Directives.


1.ng-app.

    - Framework (Angular Framework) Starts the Execution From ng-app directive.

    - ng-app directive called as root directive.

    - ng-app directive will take the logical name of the web application, if our application is static then logical name is the optional otherwise manadatory.

    - Running the Angular Application Forcefully with out ng-app directive called as Manual Bootstrap.

    - we can have only one ng-app directive per web application.


2.ng-controller.

    - used to declare the controllers.

    - we can have more than one controller.

    - in genaral we will declare the controllers in view.

    - in genaral we will implement the controllers in javascript


3.ng-repeat
    - used to iterate the list of elements from collection.

Syntax.
    ng-repeat = "iteration_variable" in "collection"


4.ng-click

     - when ever we click the user interface elements automatically ng-click directive
       will execute one user defined event.

Syntax.
    ng-click="expression"/"user defined function"/"user defined function with optional parameters"


5.ng-options.

    - used tp populate the values to the dropdown.

    Syntax.

        ng-options = "model_values as dropdown_values for iteration_variable in collection"

    Ex_1.

        $scope.data = ["Hello_1","Hello_2","Hello_3","Hello_4","Hello_5"];

    Use Case 1.

            Drop Down --->  Hello_1  to  Hello_5

            model     --->  Hello_1  to  Hello_5



    <select ng-model="my_model" ng-options="x as x for x in data"></select>



    Ex_2.

        $scope.data=[
                        {'id':1,'name':'Hello_1'},
                        {'id':2,'name':'Hello_2'},
                        {'id':3,'name':'Hello_3'},
                        {'id':4,'name':'Hello_4'},
                        {'id':5,'name':'Hello_5'}
                    ];



        Use Cases.

        Test Case 1.

                Model ---- 1 to 5

                dropdown --- Hello_1 to Hello_5


        <select ng-model="my_model" ng-options="x.id as x.name for x in data"></select>



        Test Case 2.

                Model  ---- Hello|_1  to Hello_5

                dropdown  ----  1 to 5


        <select ng-model="my_model" ng-options="x.name as x.id for x in data"></select>


        Test Case 3.

                Model ----  Hello_1  to Hello_5

                dropdown  ---- Hello_1  to Hello_5


        <select ng-model="my_model" ng-options="x.name as x.name for x in data"></select>



        Test Case 4.

                        Model ----  1  to  5

                        dropdown  ---- 1    to   5


                <select ng-model="my_model" ng-options="x.id as x.id for x in data"></select>


6.ng-init

    - used to declare the application data statically.

    - we can declare the application data in the form of a "key&value" pairs.

    - each "key&value" pair separated with the help of ";"



7.ng-dblclick

    - when ever we double the user interface elements , automatically perticular

     event will be fired by framework with the help of ng-dblclick  directive.


8.ng-if.

    - used to write the conditions in angular applications.

Syntax.

    ng-if="condition"


9.ng-switch.

    - used to write the switch cases in angular applications.

Syntax.

    <div ng-switch="expression">
        <div ng-switch-when="value1">
            //Code
        </div>

        <div ng-switch-when="value2">
            //Code
        </div>

        ---
        ---
        ---

        <div ng-switch-default>
            //Code
        </div>
    </div>


10.ng-submit.
    - used to submit the whole form at a time to the controller.

Syntax.

    <form  ng-submit="user defined function">

           //Form Elements

        <input type="submit">
    </form>


11.ng-cloak

    - used to avoid the flickering effect before displaying the application data.


12.ng-include.

    - We Can Divide the View Into Number Of Sub Views by using ng-include directive.

   Syntax.

        ng-include="target view"


13.ng-show / ng-hide

    - used to show / hide the HTML Elements Based on Conditions.

     Syntax.

        ng-show / ng-hide = "true" / "false"