Directives.

    - Directives will enhances the HTML Capabilities.

    - We Have two Types Of Directives.

        1. Predefined Directives

        2. Custom Directives


Predefined Directives.

    - The Directives Given by the Framework Called as Predefined Directives.


1. ng-app

    - Angular Framework Starts the Execution from ng-app directive.

    - ng-app directive takes the logical name of web application.

    - logical name is "optional" for "Static Angular Application".

    - logical name is mandatory for "Dynamic Angular Application".


Manual Bootstrap.

        Executing Angular Application Forcefully without ng-app directive called as Manual Bootstrap.

AutoBootstrap.

        Framework starts the Execution from ng-app directive, called as AutoBootstrap


    - we can have only one "ng-app" directive per Module in Angular Application.



2. ng-controller

    - this directive used to declare the controllers.

    - in general we will declare controllers in View.

        Ex.

        <div ng-controller="ctrl_one"></div>

    - in general we will implement controllers in javascript.

        Ex.

            app.controller("ctrl_one",ctrl_one);
            function ctrl_one(){
               //Logic Goes Here.
            }

    - we can have more than one controller per web application.

    - we can provide the communication between controllers




3. ng-repeat.
    - this directive used to iterate the list of elements from an array.


Syntax.
-
    ng-repeat = "ite_var in array" ng-bind="ite_var"


Ex.

    <h1 ng-repeat="x in [10,20,30,40,50]">
            {{x}}
    </h1>



4. ng-options.
    This Directive Used to Populate the Values to the Dropdown


Syntax.
    ng-options = "model_values as dropdown_values for iteration_variable in array"


Ex.
    $scope.data = [{"id":1,"sub":"AngularJS"},
                   {"id":2,"sub":"NodeJS"},
                   {"id":3,"sub":"reactJS"},
                   {"id":4,"sub":"Angular2"},
                   {"id":5,"sub":"d3js"}];

     Dropdown - sub
     Model - No'S


    <select ng-model="model_one" ng-options="x.id as x.sub for x in data">
            <options value="">Select Sub</option>
    </select>


5. ng-if

    - this directive used to write the conditions.


Syntax.

       ng-if="true" / "false"


6. ng-init

    - this directive used to inilize the members while launching the angular applications.

    - ng-init members are available to application scope.

    - we can initilize the members in the form of a "key&value" pairs.

    - "key&value"  are separated with the help of "="



<html ng-app>

    {{db_user}}

    <div ng-init="db_user='root'"></div>

</html>



7. ng-click
    -  when ever we click the user interface elements, automatically ng-click directive will be executed
       by angular framework.


Syntax.

       ng-click = "Expression" /
                  "user defined function" /
                  "user defined function with optional parameters"




Ex.
                  ng-click = "count = count+1"
                  ng-click="login()"
                  ng-click="login('admin','admin')"


                  <html ng-app ng-init="count=0">
                    <button class="glyphicon glyphicon-plus" ng-click="count=count+1"></button>
                    <button class = "btn btn-primary">{{count}}</button>
                    <button class="glyphicon glyphicon-minus" ng-click="count=count-1"></button>
                  </html>




                 <html ng-app="app" ng-controller="ctrl">
                    <button ng-click="clickMe()">ClickMe</button>

                    <script>
                        var app = angular.module("app",[]);

                        app.controller("ctrl",ctrl);
                        function ctrl($scope){
                            $scope.clickMe = function(){
                                alert("You Clicked Button !");
                            }
                        }

                    </script>


                 </html>





                <input type="text" ng-model="uname">
                <input type="password" ng-model="upwd">
                <button ng-click="login(uname,upwd)">Login</button>
                <button ng-click="signin({'uname':uname,'upwd':upwd})">SignIn<button>



                $scope.login = function(arg1,arg2){
                    alert(arg1+"..."+arg2);
                }

                $scope.signin = function(arg1){
                    alert(arg1);
                }



8. ng-dblclick

    - when ever we double click the user interface elements, automatically ng-dblclick directive
      will be executed by angular framework.


Syntax.

    ng-dblclick = "Expression" /

                  "user defined function" /

                  "user defined function with optional parameters"



Ex.

<html ng-app ng-init="my_model=array[4]">
    <select ng-model="my_model" ng-options="x as x for x in array">
        <option value="">--Select Sub--</option>
    </select>

    <button ng-dblclick="clickMe(my_model)">Double Click</button>

    app.controller("ctrl" , ctrl);
    function ctrl($scope){
        $scope.array = ["AngularJS","Angular4","reactJS","NodeJS","KnockoutJS"];
        $scope.clickMe = function(data){
            alert(data);
        }
    }
</html>



9.ng-show

    - This Directive used to show / hide the elements Based On Condition.

    - This Directive won't works with the HTML DOM.


Syntax.

    ng-show = "true" / "false"


10. ng-hide

        - This Directive used to show / hide elements Based on Condition.

        Syntax.

            ng-hide="true"      //element will hide

            ng-hide="false"     //element will shown


11. ng-include

        - This Directive used to Divide the View into Number Of Sub Views.

        - By using ng-include directive , readability of application will be increased.

Syntax.

        ng-include="target template"


12. ng-class-odd

        - This Directive used to apply the CSS Classes to the ODD Rows Of Table.

Syntax.
    <tr ng-repeat="x in data" ng-class-odd='my_class'>
        //Logic Goes Here
    </tr>


13. ng-class-even
    - This Directive used to apply the css classes to Even Rows Of Table.

Syntax.
    <tr ng-repeat="x in data" ng-class-even='my_class'>
        //Logic Goes Here
    </tr>



14. ng-switch

        - This Directive used to write the Switch Cases in Angular Application.


Syntax.

    <div ng-switch="Expression">
        <div ng-switch-when="value1">
              //Logic
        </div>
        <div ng-switch-when="value2">
             //Logic
        </div>

            ---
            ---

        <div ng-switch-default>
            //Logic
        </div>
    </div>



15. ng-submit
        - used to submit the form to the controller.


 <form ng-submit="register()">

        //form elements

        <input type="submit">
 </form>


 app.controller("ctrl",ctrl);
  function ctrl($scope){
    $scope.register = function(){
        //Store the Register Values into DataBase
    }
 }

 16. ng-cloak

        - this directive used to avoid the uncompiled / unparsed data while refreshing
          the Webpage.


 Syntax.

          <div ng-controller="ctrl_one" ng-cloak>

               {{var_one}}

          </div>


      ****************************
 ngCloakDemo

          index.html

          app.js

          controllers

                ctrl_one.js

                ctrl_two.js

          bower.json

          .bowerrc
     *********************************

     index.html
     -
    <div ng-controller="ctrl_one" ng-cloak>
        <h1>{{var_one}}</h1>
    </div>

    <div ng-controller="ctrl_two" ng-cloak>
        <h1>{{var_two}}</h1>
    </div>

Mouse Events.
-
    ng-mousedown /
    ng-mouseup

    ng-mouseover/
    ng-mouseout                = "Expression" / "user defined function[optional parameters]"

    ng-mouseenter/
    ng-mouseleave

    ng-mousemove


Ex.

<div ng-mousedown="down()" ng-mouseup="up()">

</div>


<div ng-mouseenter="enter()" ng-mouseleave="leave()">

</div>

