Directives.
    - Directives in AngularJS Enhances the HTML Capabilities.
    - we have two types of directives.
        1.predefined directives
        2.custom directives

Predefined Directives.
    - The Directives Given By the Framework called as Predefined Directives.

1.ng-app

    - This Directive Called as Root Directive.

    - Framework Stars the Execution from ng-app directive.

    - ng-app directive taking the logical name of the web application,
      and it's optional when ever our application is static otherwise mandatory(Dynamic).

    - we can have only one ng-app directive per web application.

    - we can run the angular application forcefully without ng-app directive called as Manual Bootstrap.

ngAppDemo_1.html
-
<!DOCTYPE html>
<html>
    <div ng-app>
        <h1 style="color:red">Addition.{{10+10}}</h1>
        <div>
            <h1 style="color:green">Subtraction.{{20-10}}</h1>
        </div>
    </div>

    <div>
        <h1 style="color:red">Multiplication.{{10*10}}</h1>
    </div>
    <script src="bower_components/angular/angular.min.js"></script>
</html>

O/P:
    Addition.20

    Subtraction.10

    Multiplication.{{10*10}}



ngAppDemo_2.html
-
<!DOCTYPE html>
<html>
    <h1 style="color:red">Addition.{{10+10}}</h1>
    <h1 style="color:green">Subtraction.{{20-10}}</h1>
    <h1 style="color:blue">Multiplication.{{10*10}}</h1>
    <script src="bower_components/angular/angular.min.js"></script>
    <script>
        angular.bootstrap(document);
    </script>
</html>

O/P:
    Addition.20
    Subtraction.10
    Multiplication.100


ngAppDemo_3.html
-
<!DOCTYPE html>
<html>
    <div ng-controller="ctrl">
        <h1>{{var_one}}</h1>
    </div>
    <script src="bower_components/angular/angular.min.js"></script>
    <script>
        var app = angular.module("app",[]);
        app.controller("ctrl",ctrl);
        ctrl.$inject=["$scope"];
        function ctrl($scope){
            $scope.var_one = "I am from Manual Bootstrap";
        }
        angular.bootstrap(document,["app"]);
    </script>
</html>

O/P:
       I am from Manual Bootstrap



ngAppDemo_4.html
-
<!DOCTYPE html>
<html>
    <div ng-app="app" ng-controller="ctrl_one">
        <h1>{{var_one}}</h1>
    </div>
    <div id="div_two" ng-controller="ctrl_two">
        <h1>{{var_two}}</h1>
    </div>
    <script src="bower_components/angular/angular.min.js"></script>
    <script>
        var app = angular.module("app",[]);
        app.controller("ctrl_one",ctrl_one);
        ctrl_one.$inject=["$scope"];
        function ctrl_one($scope){
            $scope.var_one = "I am from Auto BootStrap";
        }
        app.controller("ctrl_two",ctrl_two);
        ctrl_two.$inject=["$scope"];
        function ctrl_two($scope){
            $scope.var_two="I am from Manual Bootstrap";
        }
        var div_two = document.getElementById("div_two");
        angular.bootstrap(div_two,["app"]);
    </script>
</html>


O/P:
    I am from Auto BootStrap

    I am from Manual Bootstrap


2.ng-controller
     - used to declare the controllers.
     - in genaral we will declare the controllers in view.

        Ex.

            ng-controller="name of the controller"

     - in genaral we will implement controllers in javascript.

        Ex.

            app.controller("name of the controller", user defined function to implement controller);

                            "ctrl",                     ctrl

            ctrl.$inject = ["$scope"];
            function ctrl($scope){
                  //Logic Goes Here
            }


        - We Can Have More Than one Controller per web application.



Ex_1.

    Create the Angular Application with the Following Controllers


    1.ctrl_one

    2.ctrl_two

    3.ctrl_three

         - "ctrl_one" should binds the "var_one" variable

         - "ctrl_two" should binds the "var_two" variable

         - "ctrl_three" should binds the "var_three" variable





Ex_2.
    Create the Following Controllers with the "parent & child" relations

    1.parent

    2.child

    3.sub_child

        - parent controller should binds the "parent" variable.

        - child controller should binds the "child" variable.

        - sub_child controller should binds the "sub_child" variable.


Ex_3.

    Implement the Sample Angular Application with $rootScope.

        - rootScope members we can access in entire web application.


3.ng-repeat.

       - used to iterate the list of elements from an collection.

Syntax.

    ng-repeat = "iteration_variable in collection"

Ex.

    ng-repeat="x in [10,20,30,40,50]"

    {{x}}


Predefined Objects with ng-repeat directive.

1.$index.

    - it will return the indexes of all the elements in collection.

2.$first

    - it will return first index of an collection as true.


3.$last

    - it will return last index of an collection as true.


4.$middle

    - it will return all the middle indexes of an collection as true.

5.$even

    - it will return even indexes of an collection as true.

6.$odd

    - it will return odd indexes of an collection as true.



4.ng-if
    - used to write the conditions in angular applications.

Syntax.

    ng-if= "true" / "false"




5.ng-options.

    - used to populate the values to the dropdown.

    Syntax.

        ng-options = "model_values as dropdown_values for iteration_variable in collection"



6.ng-init

    - used to declare the static data in the form of a key & value pairs.

    - each key&value pairs separated with the help of ";"



7.ng-click

    - when ever we click the user interface elements , automatically angular framework
      will execute the ng-click directive.

      Syntax.

        ng-click = "Expression" / "user defined function" / "user defined function with optional paramerers"







































































































