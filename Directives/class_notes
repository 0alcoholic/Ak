Directive:
    - Directives in AngularJS Enhances the HTML Capabilities.

    - we have two types of Directives.

        1. predefined directives

        2. custom directives


predefined directives:

    - The Directives Given by the Angular Framework called as Predefined
      Directives.


custom directives:

    - The Directives Developed by developer called as Custom Directives.



Predefined directive:
---------------------

1. ng-app

    - angular framework starts the execution from ng-app directive.

    - we can have only one ng-app directive per web application.

    - this directive called as root directive of angular application.

    - ng-app directive takes the logical name of web application.

    - "logical name" of web application optional for static angular applications

    - "logical name" of web application mandatory for dynamic angular applications.

    - Executing the Angular Application forcefully without ng-app
      directive called as Manual Bootstrap.



ng-controller:
--------------

    -




Ex.

    <div ng-controller="ctrl">
        //Binding the Variables
    </div>


    app.controller("ctrl",ctrl);
    function ctrl($scope){
        //Busniess Logic
    }



3. ng-click:
------------
    - when ever we click the user interface elements automatically
      ng-click directive will be executed by angular framework.


Syntax.
    ng-click="expression"/
             "user defined function"/
             "user defined function with optional parameters"


Ex.
    ng-click="count=count+1"

    ng-click="login()"

    ng-click="login('admin','admin')"


        *************************
    <label>Uname.</label>
    <input type="text" ng-model="uname">

    <label>Upwd.</label>
    <input type="password" ng-model="upwd">

    <button ng-click="login(uname,upwd)">Login</button>

    app.controller("ctrl",ctrl);
    function ctrl($scope){
        $scope.login = function(arg1,arg2){
            if(arg1 == "admin" && arg2 == "admin"){
                alert("Login Success !");
            }else{
                alert("Login Fail !");
            }
        }
    }
        ***************************


4. ng-repeat:

    - this directive used to iterate the list of elements from an array.


Syntax.
    ng-repeat = "variable in array"
    {{variable}}


Ex.
    ng-repeat = "x in [10,20,30,40,50]"

    {{x}}...{{$first}}...{{$last}}...{{$middle}}...{{$even}}...{{$odd}}


$first - it will return the first index of an array as true.
$last  -  it will return the last index of an array as true.
$middle - it will return the middle indexes of an array as true.
$even  - it will return even indexes of an array as true.
$odd   - it will return odd indexes of an array as true.
$index - it will return indexes of an elements from an array



Ex.

app.controller("ctrl",ctrl);
function ctrl($scope){
    $scope.array_one = [
                        "AngularJS",
                        "Angular4",
                        "NodeJS",
                        "reactJS",
                        "MongoDB"
                       ];

    $scope.array_two = {
                          "products":[
                                        {"p_id":1,"p_name":"p_one","p_cost":10000},
                                        {"p_id":2,"p_name":"p_two","p_cost":20000},
                                        {"p_id":3,"p_name":"p_three","p_cost":30000},
                                        {"p_id":4,"p_name":"p_four","p_cost":40000},
                                        {"p_id":5,"p_name":"p_five","p_cost":50000}
                            ]
                       };


}

<h1 ng-repeat="x in array_one" ng-bind="x"></h1>

<table class="table table-responsive">
    <tr>
        <th>id</th>
        <th>name</th>
        <th>cost</th>
    <tr>

    <tr ng-repeat="x in array_two.products">
        <td>{{x.p_id}}</td>
        <td>{{x.p_name</td>
        <td>{{x.p_cost}}</td>
    </tr>

</table>


5. ng-options:
    - this directive used to populate the values to the dropdown.


Syntax.
    ng-options = "model_values as
                  dropdown_values for
                  iteration_variable in
                  array"

Ex_1:
    $scope.array_one = [
            {'id':1,'sub':'AngularJS'},
            {'id':2,'sub':'Angular4'},
            {'id':3,'sub':'reactJS'},
            {'id':4,'sub':'NodeJS'},
            {'id':5,'sub':'MongoDB'}
    ];

Use Case:1
        dropdown - sub's
        model    - id's

<select ng-model="model_one" ng-options="x.id as x.sub for x in array_one">
    <option value="">--Select Sub--</option>
</select>

Use Case : 2

    dropdown - sub's
    model    - sub's

<select ng-model="model_two" ng-options="x.sub as x.sub for x in array_one">
    <option value="">--Select Sub--</option>
</select>
<h1>{{model_two</h1>


Use Case : 3

    dropdown - id's
    model    - id's


<select ng-model="model_three" ng-options="x.id as x.id for x in array_one">
    <option value="">--Select ID--</option>
</select>
<h1>{{model_three}}</h1>

Use Case : 4

    dropdown - id's
    model    - sub's

<select ng-model="model_four" ng-options="x.sub as x.id for x in array_one">
    <option value="">--Select ID--</option>
</select>
<h1>{{model_four}}</h1>



Ex.

$scope.array_two = ["AngularJS","Angular4","reactJS","NodeJS","MongoDB];

<select ng-model="model_five" ng-options="x as x for x in array_two">
    <option value="">--Select Sub--</option>
</select>
<h1>{{model_five}}</h1>





6. ng-init

    - this directive used to initilize the members in configuration phase
      (constructor)

    - we can initilize the members in the form of a "key&value" pairs.

    - ng-init initilised members are available to application scope.


Ex.
    ng-init = "db_user='root'"
    {{db_user}} //root



7. ng-dblclick
    - when ever we double click the user interface elements
      automatically ng-dblclick directive will be executed
      by angular framework.


Syntax.
    ng-dblclick = "expression"/
                  "user defined function"/
                  "user defined function with parameters"






































