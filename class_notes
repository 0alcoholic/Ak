1. Introduction

    What is AngularJS ??
    Why AngularJS ??


2. Environmental Setup

    1. bower

    2. IDE'S - WebStrom , Ecilipse , Visual Studio

    3. GitHub


3. Angular Applications
    1. Static Angular Application
    2. Dynamic Angular Application


4. Directives


5. Single Page Applications


6. Services


7. NodeJS Interaction with AngularJS


    AngularJS - NodeJS - MySQL

    AngularJS - NodeJS - MongoDB




 - AngularJS is the Client Side JavaScript Framework.

 - AngularJS Follows the MVC Design pattern

    M - Model

    V - View

    C - Controller


  - AngularJS Reduces the Burden on the Server by implementing the Business Components
    at client side by using MVC

  - We are Loosing the Secuirity by UI Frameworks


bower:
-----

    - bower is the Automation tool, used to download the
      dependencies to develop web application

    - bower based on NodeJS


installation of bower:
----------------------
- we can install the bower by using following node command.

>npm install -g bower

[Note : before installing the bower , we must install the nodejs]


bower components
----------------
bower.json
----------
{
    "name":"nareshit",
    "dependencies":{
            "angular":"latest",
            "bootstrap":"latest"
    }
}

downloading the dependencies:
----------------------------
>bower install

[Automatically dependencies will downloads to bower_components folder]


Angular Framework path:
-----------------------
bower_components/angular/angular.min.js


bootstrap path
--------------
bower_components/bootstrap/dist/css/bootstrap.min.css


jQuery path
-----------
bower_components/jquery/dist/jquery.min.js


Angular Applications:
---------------------

    - by using angularjs, we can create two types of applications.

1. static angular application

2. dynamic angular application


static angular application:
    - if view won't interacts with the controller for dynamic data then such type of
      angular application called as static angular application.


steps to create the static angular application:
-----------------------------------------------

step 1:
    download angular framework by using bower.

step 2:
    create the view with following directives.

    1. ng-app
    2. ng-model
    3. ng-bind

    [directives in angularjs enhances the features of view]


index.html
----------
<!DOCTYPE html>

<html ng-app>

    <input type="number" ng-model="model_one"> <br><br>
    <input type="number" ng-model="model_two"> <br><br>

    <h1 style="color:red" ng-bind="model_one+model_two"></h1>

    <script src="bower_components/angular/angular.min.js"></script>
</html>

- angular framework starts the execution from ng-app directive.

- ng-app directive takes the logical name of web application

- logical name of web application is optional for static web applications

- logical name of web application mandatory for dynamic web applications.

- ng-model directive creates the object in heap memory with application data.

- ng-bind directive binds the model data to the view.

dynamic angular application:
----------------------------
 - if view interacts with the controller for dynamic data then such type of angular application
   called as dynamic angular application


steps to create the dynamic angular application
------------------------------------------------

step 1:
    download angular framework by using bower.

step 2:
    load the angular framework.

step 3:
    declare the root directive with logical name

step 4:
    declare the controller by using "ng-controller" directive.


step 5:
    Create the "application module level" object.
    we can use "angular module level object" to implement controllers, services, filters,....
    var app = angular.module("app",[]);

step 6:
    implement the controller.


Declaring the variables in controller
-------------------------------------
Ex.
    $scope.sub_one = "AngularJS";

    {{sub_one}} //AngularJS



Declaring the functions in controller
-------------------------------------
Ex.
    $scope.my_fun = function(){
        return "Rest API Data Soon....";
    }
    {{my_fun()}} //Rest API Data Soon....


Declaring the Arrays in controllers
-----------------------------------
Ex.
    $scope.array = [10,20,30,40,50];

    <p ng-repeat="x in array" ng-bind="x"></p>  // 10 20 30 40 50


Declaring the Objects in controllers
------------------------------------

Ex.
    $scope.obj = {
        "fun_one":fun_one
    };

    function fun_one(){
        return "AngularJS";
    }

    {{obj.fun_one()}} // AngularJS



            //Array of json objects
            $scope.my_obj = [
                {'id':1,'name':'Hello_1','age':20},
                {'id':2,'name':'Hello_2','age':22},
                {'id':3,'name':'Hello_3','age':24},
                {'id':4,'name':'Hello_4','age':26},
                {'id':5,'name':'Hello_5','age':28}
            ];

            <table border="1">
                <tr>
                     <th>id</th>
                     <th>name</th>
                     <th>age</th>
                </tr>

                <tr ng-repeat="x in my_obj">
                      <td>{{x.id}}</td>
                      <td>{{x.name}}</td>
                      <td>{{x.age}}</td>
                </tr>

            </table>



ng-click:
--------
    - when ever we click the user interface elements, automatically
      ng-click directive executed by angular framework.


Syntax:
    ng-click = "Expression" /
               "user defined function" /
               "user defined function with parameters"



Services:
--------

    - services in angularjs, used to share the common business logic
      to controllers.

    - by using services we can reuse the business logic.

    - we have two types of services.

        1. predefined services

        2. custom services


predefined services:
    - the services given by the angular framework called as predefined
      services

    Ex.
        $http
        $q
        $timeout
        $interval
        $location



custom services:

    - the services developed by developer based on application requirement
      called as custom services.

    - in angularjs, we can create the custom services in five ways.

        1. factory()
        2. service()
        3. value()
        4. constant()
        5. provider()

creating the custom service by using factory()
----------------------------------------------

app.factory("my_service",my_service);
function my_service(){
    //return "Data From DB Soon.....";
    return new my_class("i am from external javascript").fun_one();
}


function my_class(arg1){
    this.fun_one = function(){
        return arg1;
    }
}


app.controller("ctrl_one",ctrl_one);
function ctrl_one($scope,my_service){
    $scope.var_one = my_service;
}

app.controller("ctrl_two",ctrl_two);
function ctrl_two($scope,my_service){
    $scope.var_two = my_service;
}

[Note : factory() can interact with the external javascript]


creating the custom service by using service()
----------------------------------------------

- service() depending on user defined functions to provide the services
to controllers

Ex.

app.service("my_service",my_service);

function my_service(){

    this.fun_one = function(){
        return "Data From Java Servlets...."
    };

    this.fun_two = function(){
        return "Data From MVC....";
    };

}


app.controller("ctrl_one",ctrl_one);
function ctrl_one($scope,my_service){
    $scope.var_one = my_service.fun_one();
}

app.controller("ctrl_two",ctrl_two);
function ctrl_two($scope,my_service){
    $scope.var_two = my_service.fun_two();
}




creating the custom service by using provider()
-----------------------------------------------
    -provider() depending on predefined function "$get" , to provide
     the services to controllers.

Ex.

app.provider("my_service",my_service);
function my_service(){
    this.db_password = "root_one";
    this.$get = function(){
        return this.db_password;
    }
}

app.config(config);
function config(my_serviceProvider){
    my_serviceProvider.db_password = "root_two";
}




predefined services:
--------------------

1. $http
    - this predefined service used to interact with the servers
      by using http protocol.


app.service("my_service",my_service);
function my_service($http){
    this.getData = function(){
        return $http.get("https://www.w3schools.com/angular/customers.php")
        .then(function(posRes){
            return posRes;
        },function(errRes){
            return errRes;
        });
    }
}

app.controller("ctrl",ctrl);
function ctrl($scope,my_service){
    my_service.getData().then(function(res){
        $scope.result = res;
    });
}



Single Page Applications:

    - loading the target web pages to source web page without refreshing
      the whole web page called as single page application.

    - loading the target webpage to source webpage in single page application
      called as routing.

    - we can implement the routing in single page application by using
      following modules.

        1.ngRoute

        2.ui.router

implementation of single page application by using ngRoute Module
-----------------------------------------------------------------

Step 1:
    download the ngRoute module dependency by using bower.

[Note : "angular-route":"~1.5.0" used to download the ngRoute Module
        dependency file]


[Note : angular-route.min.js file representing the ngRoute Module
        dependency]


step 2:
    add the ngRoute Module Dependency.


step 3:
    create the target templates

-----------
templates
    page_one.html
    page_two.html
-----------


step 4:
    create the controllers

---------------
controllers
    page_two.js
    page_two.js
---------------


Step 5:
    implement the routing in single page application

Rules for routing:
-----------------

1. Routing must be in config phase

Ex.
    app.config(config);
    function config(){
        //Routing Implementation
    }


2. Routing should be in "key & value pairs"
    - keys are user defined keys
        Ex.
            page_one
            page_two

    - values must be json objects with the following json keys(predefined keys)
            1.templateUrl
            2. controller


3. use the "$routeProvider" object for routing implementation



Step 6:
    create the source template.

    Ex.
        index.html




single page applications by using ui.router module
--------------------------------------------------
1. ui.router module is the 3rd party module

2. by using ui.router module , we can pass json objects as URL Parameters

3. we can implement the Nested Routing by using ui.router module.

4. we can implement the Named Views by using ui.router module.


Basic Single Page Application implementation by using ui.router module
-----------------------------------------------------------------------

1. download the ui.router module dependency file by using bower.

["angular-ui-router":"latest" is the key used to download dependency file]


2. add the ui.router dependency

app.js
------
var app = angular.module("app",["ui.router"]);

3.create the templates

4.create the controllers

5.implement the routing by using ui.router module

config.js
---------
app.config(config);
function config($stateProvider,$urlRouterProvider){
    $stateProvider.state("page_one",{
        url:"/page_one",
        templateUrl:"templates/page_one.html",
        controller:"page_one"
    })

    .state("page_two",{
            url:"/page_two",
            templateUrl:"templates/page_two.html",
            controller:"page_two"
    });

    $urlRouterProvider.otherwise("/page_one");
};


Step 6:
    create the source template

index.html
----------
<a ui-sref="page_one"><b>Page_One</b></a>
<a ui-sref="page_two"><b>Page_Two</b></a>

<div ui-view></div>


Passing the JSON Objects as the URL Parameter in ui.router module
-----------------------------------------------------------------

Nested Routing in Single Page Applications by using ui.router module
--------------------------------------------------------------------

        *****************
templates
    page_one.html
    page_two.html
    child_one.html
    child_two.html
        *****************


page_one.html
-------------
<h1>{{var_one}}</h1>
<a ui-sref=".child_one">Child_One</a>
<div ui-view></div>

page_two.html
-------------
<h1>{{var_two}}</h1>
<a ui-sref=".child_two">Child_Two</a>
<div ui-view></div>

child_one.html
--------------
<h1>{{child_one}}</h1>

child_two.html
--------------
<h1>{{child_two}}</h1>


****************
controllers
    page_one.js
    page_two.js
    child_one.js
    child_two.js
*****************

config.js
---------

$stateProvider.state("page_one",{
    url:"/page_one",
    templateUrl:"templates/page_one.html",
    controller:"page_one"
})

.state("page_one.child_one",{
    url:"/child_one",
    templateUrl:"templates/child_one.html",
    controller:"child_one"
});


Named Views in Single Page Application by using ui.router Module
-----------------------------------------------------------------

page_one.html
-------------
<h1>{{var_one}}</h1>
<div ui-view="calc"></div>
<div ui-view="summary"></div>


NodeJS:
-------
    - NodeJS is the server side scripting language.
    - By using NodeJS, we can create the http & tcp servers.
    - In general we will develop the node applications by using javascript.
    - nodejs supports predefined and custom modules.

modules in nodejs
-----------------
1. express
    - used to develop the REST API.

2. mysql
    - used to interact with the mysql database.

3. mongodb
    - used to interact with the mongodb.

4. http
    - used to create the http servers.

5.body-parser
    - used to set the MIME Type.

6.fs
    - used to interact with the flat files.
    Ex.
        text files
        json files
        xml files
            --
            --
            --
7. multer
    - used to handle the mutlimedia files.

8.query-string
    - used to implement the ORM in Node Applications


- in general we will download the required modules by using "package.json" file.

- we can download the modules by using following node command.

> npm install

Steps to develop the first Node Application with Angular Interaction:
---------------------------------------------------------------------
Step 1:
    download the express module by using package.json file with "npm install" command.

Step 2:
    create the angular application
Ex.
    index.html

step 3:
    create the node server.

Ex.
    server.js

Step 4:
    start the server.

>npm start

Step 5:
    launch the application by using browser


MySQL DB Interaction with NodeJS
---------------------------------


MongoDB Interaction with NodeJS:
--------------------------------

    - MongoDB is the ligth weigth database comapared to traditional databases.
        Ex.
            oracle
            mysql

    - MongoDB supports the JSON

    - MongoDB Follows the client server archirecture.


MongoDB Queries:
---------------

1. start the server
>mongod
    by default mongo server listening the following port no.
    mongodb://localhost:27017

2. connect to server
>mongo

3.create and switch to database.
>use workshop;

4.create the collection
>db.createCollection("registration");

5.insert the data.
>db.registration.insert({'uname':'admin','upwd':'admin'});

6.query the collection
>db.registration.find();






























































































































































































































































































































































