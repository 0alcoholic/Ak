1. Introduction

	What is AngularJS ??
	Why AngularJS ??


2. Environmental Setup

3. Angular Applications
	1. Static Angular Application
	2. Dynamic Angular Application


4. Directives

5. Services

6. Single Page Applications.

	1.ngRoute

	2.ui.router


7. NodeJS Integration.


AngularJS.

	- AngularJS is a Clinet Side JavaScript Framework.

	- AngularJS Follows the MVC Design Pattern.

		M - Model

		V - View

		C - Controller

	- By using AngularJS we can reduce the burden on the server by implementing
	  business components at client side.

	- we are missing the secuirity by angularjs.

	- we can provide the communication between angularjs to programming languages like
      java, dotnet,php....

    - in genaral we will develop the secured code by using programming languages.

    	Ex.

    		payment gateways
    		paypal services
    		DB Configurations
    		user details

    - we can implement the "unsecured region" by using angularjs , angular4,reactsjs....


    - angularjs supports the "two way data binding"
    	Automatic Data syncronization between "model and view" with the supervision of controller called as Two way data binding.


    - in the above diagram we have the following server calls.

    	1. http get request

    	2. http delete request

    	3. async call

    - as a programming languages developer we must make above three server calls to meet application requirement.

    - as a angularjs / angular4 developer we can only two server calls to meet application requirement because of two way data binding.

    - two way data binding reduces the burden on the server.

    - by using angularjs we can work with the HTML DOM directly.

    - DOM Stands for Document Object Model


bower:
    - bower is a automation tool used to download the dependencies to develop web application.
    - bower based on node platform

installation of bower.
---------------------
> npm install -g bower


bower components
----------------
1.bower.json
2. .bowerrc



Angular Applications:

1. static angular application
2. dynamic angular application


static angular application:

    - if view won't interacts with the controller for dynamic data then such type of application
      called as static angular application.



steps to create the static angular application:
-----------------------------------------------

step 1:
    download angular by using bower


step 2:
     create the view



dynamic angular application
---------------------------
    - if view interacts with controller for dynamic data then such type of angular application
      called as dynamic angular application.


steps to create the dynamic angular applications:
-------------------------------------------------

step 1:
    download angular by using bower

step 2:
    load angular framework

step 3:
    declare the logical name for the web application
    ng-app="app"

step 4:
     declare the controller

     <div ng-controller="ctrl">

     </div>


step 5.
     add the dependencies to angular application.

    var app = angular.module("app",[]);


Step 6.

    implement the controller.


Gulp:
    - Gulp is the production tool for UI Applications.
    - Gulp Based on NodeJS Platform.
    - By using gulp we can concat the files.
    - by using gulp we can minify the files
    - by using gulp we can delete the duplicate code.
    - by using gulp we can reduce file size.
    - we can use the modules provided by the gulp to prepare the build

1. gulp-concat
    - used to concat the files.

2. gulp-minify-html
    - used to minify the html

3. gulp-minify-css
     - used to minify css

4. gulp-uglify
     - used to minify the js files.


- we can use package.json file to download the modules(gulp modules).

- we can run the package.json file by using following command.

>npm install

Ex.

----------------------
GulpDemo
    devEnv
        html
            index_one.html
            index_two.html

        css
            style_one.css
            style_two.css

        js
             sample_one.js
             sample_two.js
-----------------------

Gulpfile.js
-
//import the modules.
var gulp = require("gulp");
var concat = require("gulp-concat");
var htmlMinify = require("gulp-minify-html");
var cssMinify = require("gulp-minify-css");
var uglify = require("gulp-uglify");

gulp.task("task_one" , function(){

    gulp.src("./devEnv/html/*.html")
        .pipe(concat("final.min.html"))
        .pipe(htmlMinify())
        .pipe(gulp.dest("http://tcs.com/ajsproject/project_one/html"));
});



Single Page Applications:

    - Loading the Target web pages to Source webpage with out refreshing the whole web page
      called as single page application.

    - Loading the target web page to source web page in single page application called as
      Routing

    - in angularjs we can implement the routing by using following modules.

        1. ngRoute
        2. ui.router


development of single page application by using ngRoute Module.


Step 1.
    download ngRoute module in visual studio IDE.

Step 2.
    add the ngRoute dependency.

app.js
-
var app = angular.module("app",["ngRoute"]);

step 3.
    create the target templates

--------
Basic_ngRoute
        templates
            page_one.html
            page_two.html
--------
page_one.html
-
<h1 style="color:red" ng-bind="var_one"></h1>

page_two.html
-
<h1 style="color:green" ng-bind="var_two"></h1>

step 4.
     create the controllers
----------------
controllers
     page_one.js
     page_two.js
----------------

page_one.js
-
app.controller("page_one",page_one);
function page_one($scope){
    $scope.var_one = "MySQL Data Soon....";
}

page_two.js
-
app.controller("page_two",page_two);
function page_two($scope){
    $scope.var_two = "MongoDB Data Soon....";
}



config.js
-
app.config(config);
function config($routeProvider){
    $routeProvider.when("/page_one" , {
        templateUrl:"templates/page_one.html",
        controller : "page_one"
    })
    .when("/page_two" , {
            templateUrl:"templates/page_two.html",
            controller : "page_two"
    })
    .otherwise("/page_one" , {
            templateUrl:"templates/page_one.html",
            controller : "page_one"
    });
};


Step 6.
    create the source template.

index.html
-
<a href="#page_one">Page_One</a>
<a href="#page_two">Page_Two</a>
<div ng-view></div>

Passing the URL Parameters by using ngRoute Module
--------------------------------------------------

index.html
-
<a href="#page_one/111/emp_1/30">Page_One</a>


config.js
-

$routeProvider.when("/page_one/:eid/:ename/:eage" , {
    templateUrl:"templates/page_one.html",
    controller : "page_one"
});ca

page_one.js
-
app.controller("page_one",page_one);
function page_one($scope,$routeParams){
    $routeParams.eid +"..."+$routeParams.ename+"...."+$routeParams.eage;
};


Single Page Applications by using ui.router Module:
-
    - ui.router module is the 3rd party module
    - by using ui.router module we can implement Nested Routing
    - by using ui.router module we can implement Named Views.
    - by using ui.router module we can pass json as the URL Parameter.


Steps to create the Basic Single Page Application by using "ui.router" module.

step 1.
    download the ui.router module.

step 2.
    add the ui.router dependency

step 3.
    create the templates

step 4.
    create the controllers

step 5.
    do the mapping in spa

config.js
-
app.config(config);
function config($stateProvider,$urlRouterProvider){
    $stateProvider.state("page_one" , {
        url:"/page_one",
        templateUrl:"templates/page_one.html",
        controller:"page_one"
    })

    .state("page_two" , {
            url:"/page_two",
            templateUrl:"templates/page_two.html",
            controller:"page_two"
    });

    $urlRouterProvider.otherwise("/page_one");
}

Step 6.
    create the source template.

index.html
-
<a ui-sref="page_one">page_one</a>
<a ui-sref="page_two">page_two</a>
<div ui-view></div>


passing json object as URL Parameter by using ui.router module
--------------------------------------------------------------

index.html
-
<a ui-sref="page_one({'p_id':1,'p_name':'laptop','p_cost':50000})">Page_One</a>

config.js
-
$stateProvider.state("page_one",{
    url:"/page_one/:p_id/:p_name/:p_cost",
    templateUrl:"templates/page_one.html",
    controller:"page_one"
});

page_one.js
-
app.controller("page_one",page_one);
function page_one($scope,$stateParams){
    $stateParams.p_id+"..."+$stateParams.p_name+"..."+$stateParams.p_cost
}

Nested routing by using ui.router module
----------------------------------------

----------------
templates
    page_one.html
    page_two.html
    child_one.html
    child_two.html
----------------
page_one.html
-
<h1 style="color:red">{{var_one}}</h1>
<a ui-sref=".child_one">Child_One</a>
<div ui-view></div>


page_two.html
-
<h1 style="color:green">{{var_two}}</h1>


child_one.html
-
<h1>{{var_three}}</h1>


child_two.html
-
<h1>{{var_four}}</h1>


---------------
controllers
    page_one.js
    page_two.js
    child_one.js
    child_two.js
---------------


config.js
-
$stateProvider.state("page_one.child_one",{
    url:"/child_one",
    templateUrl:"templates/child_one.html",
    controller:"child_one"
});


NamedViews in ui.router module
------------------------------

page_one.html
-
<h1 style="color:red" ng-bind="var_one"></h1>
<div ui-view="calc"></div>
<div ui-view="summary"></div>


config.js
-
$stateProvider.state("page_one",{
    url:"/page_one",
    views:{
        '':{
            templateUrl:"templates/page_one.html",
            controller:"page_one"
        },
        'calc@page_one':{
            templateUrl:"templates/calc.html",
            controller:"calc"
        },
        'summary@page_one':{
            templateUrl:"templates/summary.html",
            controller:"summary"
        }
    }
});


Services:

    - services are used to provide the common services to controllers.

    - by using services we can reuse the business logic.

    - we have two types of services.

        1. predefined services

        2. custom services

predefined services:

       - the services provide by framework called as predefined services.


custom services:

       - the services developed by developer based on application requirement called as
         custom services.

       - in angularjs we can create custom services by using following functions

            1. factory()

            2. provider()

            3. service()

            4. constant()

            5. value()


creating the custom service by using factory()
----------------------------------------------
        //javascript class
        function my_class(arg1) {
            this.my_fun = function () {
                return arg1;
            };
        };

        //custom service by using factory
        app.factory("my_service",my_service);
        function my_service() {
            return new my_class("Data from server....").my_fun();
        }


app.controller("ctrl_one",ctrl_one);
function ctrl_one($scope,my_service){
    $scope.var_one = my_service;
}

app.controller("ctrl_two",ctrl_two);
function ctrl_two($scope,my_service){
    $scope.var_two = my_service;
}


- factory() can return the data to controllers directly.

- factory() can create the objects to external javascript classes with the new keyword.




creating the custom service by using provider()
-----------------------------------------------

app.provider("my_service",my_service);
function my_service(){
    this.db_password="root_one";
    this.$get = function(){
         return this.db_password;
    }
}

app.config(config);
function config(my_serviceProvider){
    my_serviceProvider.db_password = "root_two";
}


[Note : provider() depending on "$get" predefined function to provide the services to controllers]


creating the custom service by using value()
--------------------------------------------

- we can create the custom service in the form of a "key&value" pairs.

Ex.

    app.value("my_service" , "First Value");
    app.value("my_service" , "Second Value");

[note: value will return the latest value and overriding will happen]

O/P : Second Value

      Second Value






creating the custom service by using constant()
--------------------------------------------

- we can create the custom service in the form of a "key&value" pairs.

Ex.

    app.constant("my_service" , "First Value");
    app.constant("my_service" , "Second Value");

[note: value will return the old value and overriding won't happen]

O/P : First Value

      First Value



creating the custom service by using service()
----------------------------------------------

app.service("my_service",my_service);
function my_service(){
    this.fun_one = function(){
        return "For Controller One !";
    }
    this.fun_two = function(){
        return "For Controller Two !";
    }
}

Predefined Services:

1.$http
    - $http used to connect to servers by using http protocol.


my_service.js
-
app.service("my_service",my_service);
function my_service($http){
    this.fun_one = function(){
        return $http.get("https://www.w3schools.com/angular/customers.php")
                .then(function(posRes){
            return posRes;
        },function(errRes){

            return errRes;
        });
    }
}

ctrl.js
-
app.controller("ctrl",ctrl);
function ctrl($scope,my_service){
    my_service.fun_one().then(function(res){
        $scope.var_one = res;
    });
}

index.html
-
{{var_one}}


$q:
--
    - this predefined service used to eliminate the data redundency.







































