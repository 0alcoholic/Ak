1. Introduction
    What is AngularJS ??
    Why AngularJS ??

2. Environmental Setup

    1. Ecilipse
    2. Visual Studio
    3. Webstrom

3. Angular Applications

    1. Static Angular Application.
    2. Dynamic Angular Application.

4. Directives

5. Services
    1. Predefined Services
    2. Custom Services

6. Single Page Applications

    1. ngRoute
    2. ui.router


7. NodeJS Integration with AngularJS

    1. AngularJS - NodeJS - MySQL
    2. AngularJS - NodeJS - MongoDB
    3. AngularJS - NodeJS - Static Files


    - AngularJS is the Client Side JavaScript Framework

    - AngularJS follows MVC Design Pattern.

        M - Model

        V - View

        C - Controller

    - By using UI Technologies (AngularJS, Angular4.x,reactJS, d3, cs,....)
      reduces the Burden on the Server by implementing the Business Components
      at client Side by using MVC.

    - By using UI Technologies we are loosing the Secuirity.


bower:
-----
    - bower is the Automation tool used to download the required dependencies
      to develop web application.

    - bower based on nodejs platform.

Installation of bower:
----------------------
1. Download and Install the NodeJS

    website   : https://nodejs.org/en/download/
    file name : node-v6.11.3-x64.msi

2. installation of bower plugin.
> npm install -g bower

bower.json
----------
{
    "name":"nareshit",
    "dependencies":{
        "angular":"latest",
        "bootstrap":"latest",
        "d3":"latest",
            --
            --
            --
    }
}

>bower install


Angular Applications:
---------------------
    - by using AngularJS, we can create two types of applications.

        1. Static Angular Application
        2. Dynamic Angular Application

1. Static Angular Application
-----------------------------
    - View won't interacts with controller for dynamic data then such type
      of angular application Static.


Steps to Develop the Static Angular Application:
------------------------------------------------
1. download angular by using bower

2. load the angular framework in view.

3. Create the View with Directives.

    1. ng-app
    2. ng-model
    3. ng-bind


Dynamic Angular Application:
----------------------------
    - if view interacts with controller for dynamic data then such type of
      application called as dynamic angular application.

Step 1:
    download angular by using bower.

Step 2:
    load angular framework.


Step 3:
    declare the root directive with logical name.
    ng-app="app"


Step 4:
    declare the controller

    <div ng-controller="ctrl">
        {{data}}
    </div>

Step 5:
    Create the App Instance.

    var app = angular.module("app",[]);


[ Note : where "app" object used to implement the controllers, services, filters,
       directives,....]


Step 6:
    Implement the Controller.


    app.controller("ctrl",my_fun);
    function my_fun($scope){
        $scope.data = "Data From DataBase Soon...!";

    }



Creating the Variables in Controller:
------------------------------------

$scope.var_one = "Hello";
{{var_one}}  //Hello


Creating the functions in Controller:
-------------------------------------
$scope.fun_one = function(){
    return "Welcome !";
}
{{fun_one()}}  //Welcome


Creating the JSON Objects in Controller:
---------------------------------------
$scope.my_obj = {"key1":"Hello_1"};
{{my_obj.key1}} //Hello_1



ng-click directive:
-------------------

ng-click = "Expression" /
            "user defined function"/
            "user defined function with parameters"

Ex.
    ng-click="count = count+1"
    ng-click="login()"
    ng-click="login('admin','admin')"




ng-repeat directive:
--------------------
    - this directive used to iterate the list of elements from an array.


Services:
---------
    - Services can provide the common business logic to multiple controllers.

    - We have two types of services.

        1. custom services

        2. predefined services

1. custom services
------------------
    - creating our own service based on application requirement called as
      Custom Service.

    - In AngularJS, we can create the Custom Services in 5 ways.

    1. factory()
    2. service()
    3. value()
    4. constant()
    5. provider()


creating the custom service by using factory()
-----------------------------------------------

    - factory() is global function in angularjs used to create the custom services.


app.factory("my_service",my_service);
function my_service(){
    //return "Welcome to Custom Services !";
    return new class_one().my_fun();
}
app.controller("ctrl_one",ctrl_one);
function ctrl_one($scope,my_service){
    $scope.var_one = my_service;
}
app.controller("ctrl_two",ctrl_two);
function ctrl_two($scope,my_service){
    $scope.var_two = my_service;
}
function class_one(){
    this.my_fun = function(){
        return "Welcome to JavaScript Classes !";
    }
}


creating the custom service by using service()
----------------------------------------------
app.service("my_service",my_service);
function my_service(){
    this.fun_one = function(){
        return "i am from fun_one";
    }
    this.fun_two = function(){
        return "i am from fun_two";
    }
}
app.controller("ctrl_one",ctrl_one);
function ctrl_one($scope,my_service){
    $scope.var_one = my_service.fun_one();
}
app.controller("ctrl_two",ctrl_two);
function ctrl_two($scope,my_service){
    $scope.var_two = my_service.fun_two();
}


creating the custom services by using value()
---------------------------------------------
    - we can create the custom service in the form of a key&value pairs.

 Ex.
    app.value("my_service","First Value");
    app.value("my_service","Second Value");

    app.controller("ctrl_one",ctrl_one);
    function ctrl_one($scope,my_service){
        $scope.var_one = my_service;
    }
    app.controller("ctrl_two",ctrl_two);
    function ctrl_two($scope,my_service){
        $scope.var_two = my_service;
    }


creating the custom services by using constant()
---------------------------------------------
    - we can create the custom service in the form of a key&value pairs.

 Ex.
    app.constant("my_service","First Value");
    app.constant("my_service","Second Value");

    app.controller("ctrl_one",ctrl_one);
    function ctrl_one($scope,my_service){
        $scope.var_one = my_service;
    }
    app.controller("ctrl_two",ctrl_two);
    function ctrl_two($scope,my_service){
        $scope.var_two = my_service;
    }


Creating the Custom Service by using provider()
-----------------------------------------------

app.provider("my_service",my_service);
function my_service(){
    this.db_user="root_one";
    this.$get = function(){
        return this.db_user;
    }
}

app.config(config);
function config(my_serviceProvider){
    my_serviceProvider.db_user = "root_two";
}

Predefined Services:
-------------------



































































