SinglePageApplications.

    - Loading the Target Webpage to Source Webpage , without refreshing the whole webpage called as
      Single Page Application.

    - Loading the Target Webpage to Source Webapage called as Routing.

    - In AngularJS , we Can Achieve the Routing by using 2 Modules.

        1.ngRoute

        2.ui.router


Steps to Design the Single Page Application By using ngRoute Module.


Step 1.
    Download ngRoute Module by using bower.

----------
Basic_ngRoute
    bower.json
    .bowerrc
-----------

bower.json
-
{
    "name":"nareshit",
    "dependencies":{
        "angular":"~1.5.0",
        "angular-route":"~1.5.0"
    }
}

.bowerrc
-
{
    "directory":"bower_components"
}


Step 2.
    Add the ngRoute Dependency.

app.js
-
var app = angular.module("app",["ngRoute"]);

Step 3.
    Create the Target Templates
---------------------
templates
    page_one.html
    page_two.html
---------------------

page_one.html
-
<h1 style="color:red">{{var_one}}</h1>


page_two.html
-
<h1 style="color:green">{{var_two}}</h1>


Step 4.

Create the Controllers.

--------------
controllers
    page_one.js
    page_two.js
-------------

page_one.js
-
app.controller("page_one",page_one);
page_one.$inject=["$scope"];
function page_one($scope){
    $scope.var_one = "I am from page one controller !";
}


page_two.js
-
app.controller("page_two",page_two);
page_two.$inject=["$scope"];
function page_two($scope){
    $scope.var_two = "I am from page two controller !";
}



Step 5.
    Do the Mapping in Single Page Application

config.js
-
app.config(config);
config.$inject=["$routeProvider"];
function config($routeProvider){
    $routeProvider.when("/page_one",{templateUrl:"templates/page_one.html", controller:"page_one"})
                  .when("/page_two",{templateUrl:"templates/page_two.html", controller:"page_two"})
                  .otherwise("/page_one",{templateUrl:"templates/page_one.html", controller:"page_one"});

}


Step 6.
    Create the Source Template.

index.html
-
<a href="#page_one">Page_one</a>
<a href="#page_two">Page_Two</a>
<div ng-view></div>



Passing the URL Parameters by using ngRoute Module
-
index.html
-
<a href="#page_one/1/emp_1/true">Page_One</a>
config.js
-
$routeProvider.when("/page_one/:param1/:param2/:param3" , {
    templateUrl:"templates/page_one.html",
    controller:"page_one"
});
page_one.js
-
app.controller("page_one",page_one);
page_one.$inject=["$scope","$routeParams"];
function page_one($scope,$routeParams){
    $scope.var_one = $routeParams.param1+"..."+$routeParams.param2+"..."+$routeParams.param3;
}



ui.router module
-

    - ui.router module is the 3rd party module

    - ui.router module supports Nested Routing.

    - ui.router module supports Named Views.

    - ui.router module supports JSON as the URL Parameters.


Steps to Design Basic Single Page Application By using ui.router Module.
-

Step 1.
    Download ui.router module by using bower with the key.   (angular-ui-router)

Step 2.
    Add the ui.router Module Dependency.

app.js
-
var app = angular.module("app",["ui.router"]);

Step 3.
    Create the Target Templates

Step 4.
    Create the Controllers

Step 5.
    Mapping

config.js
-
app.config(config);
config.$inject=["$stateProvider","$urlRouterProvider"];
function config($stateProvider,$urlRouterProvider){

    $stateProvider.state("page_one",{
        url:"/page_one",
        templateUrl:"templates/page_one.html",
        controller:"page_one"
    })

    .state("page_two",{
            url:"/page_two",
            templateUrl:"templates/page_two.html",
            controller:"page_two"
     });

     $urlRouterProvider.otherwise("/page_one");
}

Step 6.
    Create the Source Template (index.html)

index.html
-

<a ui-sref="page_one">Page_One</a>
<a ui-sref="page_two">Page_Two</a>
<div ui-view></div>



Passing the JSON Objects as the URL Parameters in ui.router Module.
-

index.html
-
<a ui-sref="page_one({'id':1,'name':'Hello_1','age':20})"><b>Page_One</b></a>


config.js
-
$stateProvider.state("page_one",{
    url:"/page_one/:id/:name/:age",
    templateUrl:"templates/page_one.html",
    controller:"page_one"
});


page_one.js
-
app.controller("page_one",page_one);
page_one.$inject=["$scope","stateParams"];
function page_one($scope,$stateParams){
    $scope.var_one = $stateParams.id+"..."+$stateParams.name+"..."+$stateParams.age;
}


Nested Routing

----------
templates

    page_one.html

    page_two.html

    child_one.html

    child_two.html

---------

page_one.html
-
<h1>{{var_one}}</h1>
<a ui-sref=".child_one">Child_One</a>
<div ui-view></div>


page_two.html
-
<h1>{{var_two}}</h1>
<a ui-sref=".child_two">Child_Two</a>
<div ui-view></div>



config.js
-

app.config(config);
config.$inject=["$stateProvider","$urlRouterProvider"];
function config($stateProvider,$urlRouterProvider){
    $stateProvider.state("page_one",{
        url:"/page_one",
        templateUrl:"templates/page_one.html",
        controller:"page_one"
    })
    .state("page_one.child_one",{
            url:"/child_one",
            templateUrl:"templates/child_one.html",
            controller:"child_one"
    })
    .state("page_two",{
            url:"/page_two",
            templateUrl:"templates/page_two.html",
            controller:"page_two"
    })
    .state("page_two.child_two",{
                url:"/child_two",
                templateUrl:"templates/child_two.html",
                controller:"child_two"
    });
    $urlRouterProvider.otherwise("/page_one");
}



Named Views
-
page_one.html
-
<h1>{{var_one}}</h1>
<div ui-view="calc"></div>
<div ui-view="summary"></div>

config.js
-
$stateProvider.state("page_one",{
    url:"/page_one",
    views:{
        '':{
            templateUrl:"templates/page_one.html",
            controller:"page_one"
        },
        'calc@page_one':{
            templateUrl:"templates/calc.html",
            controller : "calc"
        },
        'summary@page_one':{
            templateUrl:"templates/summary.html",
            controller:"summary"
        }
    }
});

