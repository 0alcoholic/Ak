SinglePageApplications.

    - Loading the Resources in a webpage, without refreshing the whole web page called as
      Single Page Application.

    - Loading the Target Web Pages to Source Webpage Called as Routing.

    - We Can Implement the Routing By uisng the Following Modules.

        1.ngRoute Module
        2.ui.router Module.


Steps to Create the Single Page Application by using ngRoute Module.

Step 1.
    Download ngRoute Module by using bower.

bower.json
-
{
    "name":"nareshit",
    "dependencies":{
        "angular":"~1.5.0",
        "angular-route":"~1.5.0"
           (key)          (version)
        [used to download the ngRoute Module dependency file]
    }

}

.bowerrc
-
{
    "directory":"bower_components"
}


Step 2.
    Add the ngRoute Module Dependency.

app.js
-
var app = angular.module("app",["ngRoute"]);



Step 3.
    Create the Target Templates.
-------------
Basic_ngRoute
        templates
            page_one.html
            page_two.html
--------------
page_one.html
-
{{var_one}}

page_two.html
-
{{var_two}}

Step 4.
    Create the Controllers.
--------------
Basic_ngRoute
       controllers
            page_one.js
            page_two.js
---------------

page_one.js
-
$scope.var_one = "I am from page one controller !";



page_two.js
-
$scope.var_two = "I am from page two controller !";


Step 5.
    Done the Mapping B/W Templates and Controllers.

config.js
-
app.config(config);
config.$inject=["$routeProvider"];
function config($routeProvider){
   $routeProvider.when("/page_one",{
            templateUrl:"templates/page_one.html",
            controller:"page_one"
   })
   .when("/page_two",{
               templateUrl:"templates/page_two.html",
               controller:"page_two"
   })
   .otherwise("/page_one",{
               templateUrl:"templates/page_one.html",
               controller:"page_one"
   });
}


Step 6.
-
    Create the Source Template.


index.html
-
<a href="#page_one"><b>Page_One</b></a>
<a href="#page_two"><b>Page_Two</b></a>
<div ng-view></div>


Passing (URL Parameters) data by using ngRoute Module
-
index.html
-
<a href="#page_one/1/hello/true"><b>Page_One</b></a>

config.js
-
$routeProvider.when("/page_one/:param1/:param2/:param3",{
    templateUrl:"templates/page_one.html",
    controller : "page_one"

});

page_one.js
-
app.controller("page_one",page_one);
page_one.$inject=["$scope","$routeParams"];
function page_one($scope,$routeParams){
    $scope.var_one = $routeParams.param1+"..."+
                     $routeParams.param2+"..."+
                     $routeParams.param3;
}



Single Page Applications by using ui.router Module.


1. ui.router module is the 3rd party Module for Developing Routing in Single Page Applications

2. ui.router Module Supports JSON Objects as URL Parameters.

3. We can Develop the Nested Routing By using ui.router Module.

4. We Can Implement Named Views by using ui.router Module.


Steps to Create the Single Page Application by using ui.router module.
-
1. Download ui.router module.


2. Add the "ui.router" module depenedency


3. Create the Target Templates.

----------------
Basic_uiRouter
        templates
            page_one.html
            page_two.html
----------------

4.Create the Controllers

----------------
Basic_uiRouter
        controllers
            page_one.js
            page_two.js
----------------


5.Mapping by using ui.router module
-
app.config(config);
config.$inject = ["$stateProvider", "$urlRouterProvider"];
function config($stateProvider,$urlRouterProvider) {
    $stateProvider.state("page_one", {
        url:"/page_one",
        templateUrl: "templates/page_one.html",
        controller:"page_one"
    })
    .state("page_two", {
        url: "/page_two",
        templateUrl: "templates/page_two.html",
        controller: "page_two"
    });
    $urlRouterProvider.otherwise("/page_one");
}

6.Create the Source Template (index.html)
-

index.html
-

<a ui-sref="page_one"><b>Page_One</b></a>
<a ui-sref="page_two"><b>Page_Two</b></a>

<div ui-view></div>


Passing Data (URL Parameters) by using ui.router Module
-
Ex.

index.html
-
<a ui-sref="page_one({'id':1,'name':'Hello_1','age':20})">Page_One</a>

config.js
-
$stateProvider.state("page_one",{
    url:"/page_one/:id/:name/:age",
    templateUrl:"templates/page_one.html",
    controller:"page_one"
});

page_one.js
-
app.controller("page_one",page_one);
page_one.$inject=["$scope","$stateParams"];
function page_one($scope,$stateParams){
    $scope.var_one = $stateParams.id+"..."+$stateParams.name+"..."+$stateParams.age;
}


Nested Routing in ui.router Module.
-
1. Download "ui.router" by using "Nuget Packages"

2. Add the "ui.router" module dependency.

3.Create the Target Templates

----------
templates
    page_one.html
    page_two.html
    child_one.html
    child_two.html
-----------
page_one.html
-
<h1>{{var_one}}</h1>
<a ui-sref=".child_one">Child_One</a>
<div ui-view></div>

page_two.html
-
<h1>{{var_two}}</h1>
<a ui-sref=".child_two">Child_Two</a>
<div ui-view></div>


child_one.html
-
<h1>{{child_one}}</h1>

child_two.html
-
<h1>{{child_two}}</h1>


Step 4.
    Create the Controllers

---------------
controllers
        page_one.js
        page_two.js
        child_one.js
        child_two.js
---------------


Step 5.
    Complete the Mapping by using ui.router Module.

config.js
-
app.config(config);
config.$inject=["$stateProvider","$urlRouterProvider"];
function config($stateProvider,$urlRouterProvider){
    $stateProvider.state("page_one",{
        url:"/page_one",
        templateUrl:"templates/page_one.html",
        controller:"page_one"
    })
    .state("page_one.child_one",{
            url:"/child_one",
            templateUrl:"templates/child_one.html",
            controller:"child_one"
    })
    .state("page_two",{
            url:"/page_two",
            templateUrl:"templates/page_two.html",
            controller:"page_two"
    })
    .state("page_two.child_two",{
                url:"/child_two",
                templateUrl:"templates/child_two.html",
                controller:"child_two"
    });
    $urlRouterProvider.otherwise("/page_one");
}

6. Create the Source Template.


NamedViews in Single Page Applications.
-
    - Dividing the Target Template to Number Of Sub Templates Called as NamedViews.

Step 1.
       Download ui.router module by using "Nuget Packages"


Step 2.
    Add the ui.router Module Dependency.

Step 3.
    Create the Target Templates.

--------------
templates
    page_one.html
    page_two.html
    calc.html
    summary.html
--------------

page_one.html
-
<h1>{{var_one}}</h1>
<div ui-view="calc"></div>
<div ui-view="summary"></div>



Step 4.
    Create Controllers.
-----------
controllers
     page_one.js
     page_two.js
     calc.js
     summary.js
-----------

Step 5.
    Complete the Mapping by using ui.router module.

$stateProvider.state("page_one",{
    url:"/page_one"
    views:{
        '':{
            templateUrl:"templates/page_one.html",
            controller:"page_one"
        },
        'calc@page_one':{
            templateUrl:"templates/calc.html",
            controller:calc
        },
        'summary@page_one':{
            templateUrl:"templates/summary.html",
            controller:"summary"
        }
    }
});























































































































































