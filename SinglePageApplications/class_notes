- Loading the target template to Source Template without refreshing
  the whole webpage called as Single Page Application(SPA).

- Loading the Target Webpage to Source Webpage in Single Page Application
  Called as Routing.

- In AngularJS we can implement the Routing by using following Modules.

    1. ngRoute

    2. ui.router


Steps to Design the Single Page Application By using ngRoute Module:
--------------------------------------------------------------------

Step 1:
    download ngRoute Module Dependency file by using bower.

bower.json
----------
{
    "name":"nareshit",
    "dependencies":{
        "angular":"~1.5.0",
        "angular-route":"~1.5.0"
    }
}

[Note : "angular-route" is the bower key used to download the
        ngRoute Module Dependency file]

[Note : "angular-route.min.js" representing ngRoute Module Dependency]


Step 2:
    add the ngRoute Dependency

app.js
------
var app = angular.module("app",["ngRoute"]);


Step 3:
    create the target templates
--------------
Basic_ngRoute
        templates
            page_one.html
            page_two.html
--------------
page_one.html
-
<h1>{{var_one}}</h1>

page_two.html
-
<h1>{{var_two}}</h1>


Step 4:
    create the controllers
---------------
controllers
    page_one.js
    page_two.js
---------------

page_one.js
-----------
app.controller("page_one",page_one);
function page_one($scope){
    $scope.var_one = "I am from page one controller !";
}

page_two.js
-----------
app.controller("page_two",page_two);
function page_two($scope){
    $scope.var_two="I am from page two controller !";
}


Step 5:
    Implement the Routing in Single Page Application

Rules:
    1.Routing should be in config phase.

Ex.
    app.config(config);
    function config(){
        //Routing Implementation
    }


    2. Routing Should be in "key" & "value" pairs.
        - keys are user defined keys.
            1. page_one
            2. page_two

        - values are JSON Objects with the following JSON keys.
            1. templateUrl
            2. controller

    3. implement the Routing by using $routeProvider object.


config.js
---------
app.config(config);

function config($routeProvider){
    $routeProvider.when("/page_one",{
        templateUrl:"templates/page_one.html",
        controller:"page_one"
    })
    .when("/page_two",{
            templateUrl:"templates/page_two.html",
            controller:"page_two"
    })
    .otherwise("/page_one",{
            templateUrl:"templates/page_one.html",
            controller:"page_one"
    });
}

Step 6:
    create the source template

index.html
----------
<a href="#page_one"><b>Page_One</b></a>
<a href="#page_two"><b>Page_Two</b></a>
<div ng-view></div>



Passing URL Parameters by using ngRoue Module
---------------------------------------------

index.html
----------

<a href="#page_one/111/emp_1/50000"><b>Page_One</b></a>

config.js
---------
$routeProvider.when("/page_one/:param1/:param2/:param3",{
    templateUrl:"templates/page_one.html",
    controller:"page_one"
});

page_one.js
-----------
app.controller("page_one",page_one);
function page_one($scope,$routeParams){
    console.log($routeParams.param1); //111
    console.log($routeParams.param2); //emp_1
    console.log($routeParams.param3); //50000
}


Single Page Applications by using ui.router module:
---------------------------------------------------

    - ui.router module is the 3rd party module.

    - we can implement the Nested Routing Applications by using
      ui.router Module.

    - we can implement Named Views Applications by using ui.router
      Module.

    - As a Angular Developer we can pass the JSON Objects as the URL parameters
      by using ui.router module.


Steps to create the Basic Single Page Application by using ui.router module
----------------------------------------------------------------------------

Step 1:
    download ui.router module by using bower.

[Note : "angular-ui-router" is the bower key used to download the
        "ui.router" dependency file]

[Note : "angular-ui-router.min.js" file indicating the "ui.router"
        dependency]


Step 2:
    add the ui.router module dependency.

    var app = angular.module("app",["ui.router"]);


Step 3:
    create the target templates


Step 4:
    create the controllers.

Step 5:
    implement the Routing in Single Page Application by using
    ui.router module.

config.js
---------
app.config(config);
function config($stateProvider,$urlRouterProvider){
    $stateProvider.state("page_one",{
        url:"/page_one",
        templateUrl:"templates/page_one.html",
        controller:"page_one"
    })
    .state("page_two",{
            url:"/page_two",
            templateUrl:"templates/page_two.html",
            controller:"page_two"
    });
    $urlRouterProvider.otherwise("/page_one");
};

Step 6:
    implement the Source Template.

index.html
----------
<a ui-sref="page_one"><b>Page_One</b></a>
<a ui-sref="page_two"><b>Page_Two</b></a>
<div ui-view></div>




Passing the JSON Object as URL Parameter by using ui.router module
------------------------------------------------------------------

index.html
----------
<a ui-sref="page_one({'id':1,'name':'Hello_1','age':20})"><b>Page_One</b></a>

config.js
---------
$stateProvider.state("page_one",{
    url:"/page_one/:id/:name/:age",
    templateUrl:"templates/page_one.html",
    controller:"page_one"
});

page_one.js
-----------

app.controller("page_one",page_one);
function page_one($scope,$stateParams){

    console.log($stateParams.id);
    console.log($stateParams.name);
    console.log($stateParams.age);

}


Nested Routing in Single Page Applications by using ui.router module
---------------------------------------------------------------------

-----------------
templates
    page_one.html
    page_two.html
    child_one.html
    child_two.html
-----------------

page_one.html
-
<h1>{{var_one}}</h1>
<a ui-sref=".child_one">Child_One</a>
<div ui-view></div>

page_two.html
-
<h1>{{var_two}}</h1>
<a ui-sref=".child_two">Child_Two</a>
<div ui-view></div>

child_one.html
-
<h1>{{child_one}}</h1>

child_two.html
-
<h1>{{child_two}}</h1>

----------------
controllers
    page_one.js
    page_two.js
    child_one.js
    child_two.js
----------------

config.js
---------

app.config(config);

function config($stateProvider,$urlRouterProvider){
    $stateProvider.state("page_one",{
        url:"/page_one",
        templateUrl:"templates/page_one.html",
        controller:"page_one"
    })
    .state("page_one.child_one",{
            url:"/child_one",
            templateUrl:"templates/child_one.html",
            controller:"child_one"
    })
    .state("page_two",{
            url:"/page_two",
            templateUrl:"templates/page_two.html",
            controller:"page_two"
    })
    .state("page_two.child_two",{
            url:"/child_two",
            templateUrl:"templates/child_two.html",
            controller:"child_two"
    });
    $urlRouterProvider.otherwise("/page_one");
}

Named Views in Single Page Application by using ui.router Module:
-----------------------------------------------------------------

-------------
templates
    page_one.html
    page_two.html
    calc.html
    summary.html
--------------

page_one.html
-------------
<h1>{{var_one}}</h1>
<div ui-view="calc"></div>
<div ui-view="summary"></div>


---------
controllers
    page_one.js
    page_two.js
    calc.js
    summary.js
----------

config.js
---------

$stateProvider.state("page_one",{
    url:"/page_one",
    views:{
        '':{
            templateUrl:"templates/page_one.html",
            controller:"page_one"
        },

        'calc@page_one':{
            templateUrl:"templates/calc.html",
            controller:"calc"
        },

        'summary@page_one':{
            templateUrl:"templates/summary.html",
            controller:"summary"
        }
    }
});












