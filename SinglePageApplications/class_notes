
    - loading the target page to source page called as Routing.

    - In AngularJS we can achieve the Routing by using two modules.

        1.ngRoute

        2.ui.router

Development of Single Page Application by using ngRoute Module.

    - ngRoute Module is the Native Module.


Step 1.
    Download the ngRoute Module by using bower.


bower.json
-
{
    "dependencies":{
        "angular":"~1.5.0",
        "angular-route":"~1.5.0"
    }
}

.bowerrc.json
-
{
    "directory":"bower_components"
}

> bower install


Step 2.
    Add the ngRoute Module dependency.

app.js
-
var app = angular.module("app",["ngRoute"]);


Step 3.
    Create the Templates.
-------------
Basic_ngRoute
     templates
         page_one.html
         page_two.html
---------------
page_one.html
-
    {{var_one}}

page_two.html
-
    {{var_two}}

Step 4.
    Create the Controllers.
------------
    controllers
        page_one.js
        page_two.js
------------

page_one.js
-
$scope.var_one = "I am from page one controller";

page_two.js
-
$scope.var_two = "I am from page two controller";



Step 5.
    Done the Mapping in config phase

config.js
-
app.config( config );

config.$inject = ["$routeProvider"];

function config($routeProvider){
    $routeProvider
    .when("/page_one",{
        templateUrl:"templates/page_one.html"
        controller:"page_one"
    })
    .when("/page_two",{
            templateUrl:"templates/page_two.html"
            controller:"page_two"
    })
    .otherwise("/page_two",{
                templateUrl:"templates/page_two.html"
                controller:"page_two"
    });
}

Step 6.
    Create the keys in source template.

index.html
-
<a href = "#page_one"><b>Page_One</b></a>
<a href = "#page_two"><b>Page_Two</b></a>
<div ng-view>

</div>


Passing the Data by using ngRoute Module.
-
<label>Enter Emp Id.</label>
<input type="text" ng-model="eid">
<a href="#page_one/eid/hello/true"><b>Page_One</b></a>

$routeProvider.when("/page_one/:param1/:param2/:param3",{
    templateUrl:"templates/page_one.html",
    controller:"page_one"
});

app.controller("page_one",page_one);
page_one.$inject=["$scope","$routeParams"];
function page_one($scope,$routeParams){
    $scope.var_one = $routeParams.param1+"..."+$routeParams.param2+"..."+$routeParams.param3;
}


Single Page Applications by using ui.router Module.

    - ui.router module is the 3rd party module.

    - ui.router module supports the Nested Routings

    - ui.router module supports Named Views

    - we can pass json as the URL Parameter by using ui.router module.

Steps to Design the SPA by using ui.router Module.

Step 1.
    Download the ui.router module by using bower.
    "angular-ui-router" : "~0.2.18"

Step 2.
    Add the ui.router dependency.

    var app = angular.module("app" , ["ui.router"]);

Step 3.

    Create the Templates

Step 4.

    Create the Controllers

Step 5.
    Done the mapping

config.js
-
app.config(config);
config.$inject=["$stateProvider","$urlRouterProvider"];
function config($stateProvider,$urlRouterProvider){
    $stateProvider.state("page_one" ,{
        url:"/page_one",
        templateUrl:"templates/page_one.html",
        controller:"page_one"
    })
    .state("page_two" ,{
            url:"/page_two",
            templateUrl:"templates/page_two.html",
            controller:"page_two"
        });
    $urlRouterProvider.otherwise("/page_one");
}


Step 6.
    Declare the keys in source template.

    <a ui-sref="page_one">Page_One</a>
    <a ui-sref="page_two">Page_Two</a>

    <div ui-view>

    </div>


Passing the JSON Objects by using ui.router module
-
<a ui-sref="page_one({id:1,name:'Hello_1'})">Page_One</a>

$stateProvider.state("page_one",{
    url:"/page_one/:id/:name",
    templateUrl:"templates/page_one.html",
    controller:"page_one"
});

page_one.js
-
app.controller("page_one",page_one);
page_one.$inject=["$scope","$stateParams"];
function page_one($scope,$stateParams){
    $scope.var_one = $stateParams.id+"..."+$stateParams.name;
}


Nested Routing in ui.router module
-
Create the Templates

-------------
templates
    page_one.html
    page_two.html
    child_one.html
    child_two.html
--------------

page_one.html
-
{{var_one}}

<a ui-sref=".child_one">Child_One</a>

<div ui-view>

</div>


page_two.html
-
{{var_two}}

<a ui-sref = ".child_two">Child_Two</a>

<div ui-view>

</div>


Create the source template.
-
index.html
-
<a ui-sref="page_one">Page_One</a>
<a ui-sref="page_two">Page_Two</a>


Done the Mapping.
-

$stateProvider.state("page_one",{
    url:"/page_one",
    templateUrl:"templates/page_one.html",
    controller:"page_one"
})
.state("page_one.child_one",{
       url:"/child_one",
       templateUrl:"templates/child_one.html",
       controller:"child_one"
   })
   .state("page_two",{
       url:"/page_two",
       templateUrl:"templates/page_two.html",
       controller:"page_two"
   })
   .state("page_two.child_two",{
          url:"/child_two",
          templateUrl:"templates/child_two.html",
          controller:"child_two"
      });






























