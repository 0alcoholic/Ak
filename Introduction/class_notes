1. Variables in TypeScript

2. Functions in TypeScript

3. Classes in TypeScript

4. Interfaces in TypeScript

5. Arrow Functions in TypeScript

6. Decorators in TypeScript

7. Promises in TypeScript





TypeScript:
-----------

    - TypeScript is the Programming language introduced
      by microsoft.

    - TypeScript Follows the ECMA Standards.

    - ECMA Representing the latest version of JavaScript.

    - TypeScript used to Develop the Web Applications.

    - We can transpile the TypeScript by using "tsc"
      compiler.

    - "tsc" compiler will produces the equalent
       JavaScript.


Ex.

" sample.ts  ==> tsc  ==> sample.js "

    - in general browsers won't understands 
      the TypeScript, so we must convert the
      TypeScript to JavaScript.

    - converting the TypeScript to JavaScript called As
      transpilation.


Installation of TypeScript Compiler  (tsc)
-------------------------------------------

1. Download and Install the NodeJS


2. Install the TypeScript by using following command.

> npm install -g tsc

[Note : automatically "tsc@1.20150623.0" version will
        be installed globally]

[Note : npm stands for "Node Packaging Manager"
        npm is the integrated tool in NodeJS
        npm used to install dependecies like
            1. bower
            2. yarn
            3. JHINT
            4. Gulp
            5. Grunt
            6. Karma
            7. e2e
                --
                --
]


Variables:
----------
    - Variables in TypeScript used to store the data.

    - we can store "all types" of data by using TypeScript
      Variables.

Ex.
    Boolean
    -------
    var var_one:boolen = true;
    let var_one:boolen = true;
    var var_one=true;


    number
    ------
    let my_num:number = 100;
    let my_num:number = 0x234;
    let my_num:number = ox102;
    let my_num:number = 0x1010101;

    let my_num:number=100.10;


    string:
    -------
    let data:string="data from database soon...!";


    any:
    ---
    let data:any = 100;
    let data:any = {'key1':'Hello_1','key2':'Hello_2'};
    let data:any = new Student();


    array:
    ------
    let data:[]=[10,20,30,40,50];
    let data:<number>[] = [100,200];



Ex.
    let data:number = "Hello";
[Note : TS:2321: Incompatable Types]    


functions:
----------
    - functions are used to write the business logic.

    - by using functions we can reuse the business logic.

    - we have two types of functions.

        1. named functions
        2. anonymous functions

named functions:
----------------
    - the function with name called as named function.


Syntax:
-------
    function fun_name():return_type{
        //business logic
    }

    fun_name();

Ex_1:
-----
JavaScript:
-----------
function fun_one(){
    document.write("JavaScript Function");
}


TypeScript:
-----------
function fun_one():void{
    document.write("TypeScript Function");
}

Ex_2:
----
JavaScript:
-----------
function fun_one(arg1,arg2,arg3){
    console.log(arg1+"..."+arg2+"..."+arg3);
}
fun_one("Hello",100,true);

TypeScript:
-----------
function fun_one(arg1:string,
                 arg2:number,
                 arg3:boolen):void{
     
     console.log(arg1+"..."+
                 arg2+"..."+
                 arg3);   
}
fun_one("Hello",100,true);

Ex_3:
-----
JavaScript:
-----------
function fun_one(arg1){
    return arg1;
}

function fun_two(){
    return "Welcome...!";
}

fun_one(fun_two());


TypeScript:
-----------
function fun_one(arg1:fun_two):fun_two{
    return arg1;
}

function fun_two():string{
    return "welcome...!";
}

fun_one(fun_two());

Ex_4:
-----
JavaScript:
-----------
function fun_one(arg1){
    return arg1;
}
function fun_two(arg2){
    return arg2;
}
function fun_three(arg3){
    return fun_two(fun_one(arg3));
}
fun_three("Welcome...!");

TypeScript:
-----------
function fun_one(arg1:string):string{
    return arg1;
}
function fun_two(arg2:fun_one):fun_one{
    return arg2;
}

function fun_three(arg3:string):fun_two{
    return arg3;
}


Ex_4:
-----
JavaScript:
----------
array = [
    new student(),
    new student(),
    new student(),
    new student()
];
function fun_one(){
    return array;
}

TypeScript:
----------
array:<student>[]=[
    /*new student(),
    new student(),
    new student(),
    new student()*/
    {},
    {},
    {},
    {} 
];

function fun_one():<student>[]{
    return array;
}
















































