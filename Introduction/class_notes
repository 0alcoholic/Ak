Introduction:

    1. Automation Tools

        1. bower
        2. Gulp
        3. karma with Jasmine


    2. What is AngularJS  ??

    3. Advantages Of AngularJS ??

    4. Disadvantages Of AngularJS ??

    5. Key features of AngularJS ??

    6. Differences Between AngularJS - Angular2
                           AngularJS - NodeJS
                           AngularJS - reactJS


bower:
    - bower is the Automation tool for UI Application Development.
    - bower will manage the dependencies for UI Application Development.
    - bower based on NodeJS platform.

installation of bower tool:
--------------------------
    - we can install bower by using the nodejs commands.

>npm install -g bower


bower components
----------------
    - we have following bower components.

    1. bower.json

    2. .bowerrc

bower.json
----------
    - this component used to mention the required resources to develop web application.
{
    "name":"nareshit",
    "dependencies":{
        "angular":"latest",
        "bootstrap":"latest",
        "react":"latest",
        "d3":"latest"
    }
}


.bowerrc
--------
    - this component used to "locate the path to dependencies" downloading
      by using bower.

{
    "directory":"bower_components"
}

[Note : automatically all the dependencies will downloads to "bower_components" folder]


installation of bower components:
---------------------------------

>bower install


Gulp:
----
    - Gulp is the production tool.

    - gulp based on nodejs platform.

Advantages Of Gulp:
------------------

1. deletes the comments in development code

2. concat the files.

3. disables the log

4. uglify(compress) the js files.

5. minifies(compress) the html

6. minifies the css.

7. convert the "LESS & SASS" to CSS.

8. warm up (startup) the servers.

9. detecting the front end application changes.

10. live reloading of web applications.

11. provides predefined modules support.


Modules in Gulp:
----------------
1. gulp-concat
    - this module used to concat the files.

Ex.
    ctrl_one.js  +  ctrl_two.js ---> final.js


2. gulp-uglify
    - this module used to minifies (compress) the js files.


3. gulp-minify-html
    - this module used o minifies the html files.


4. gulp-minify-css
    - this module used to minifies the css files.


5. gulp-bower
    - this module used to install the bower components.

6. gulp-open
    - this module used to launch the browsers.

7. browsersync
    - this module sync the front end application changes to browser loading.


[Note : in genaral we will download gulp modules by using "package.json" file]

[Note : we can install the package.json file by using following command

        > npm install
]


Steps to Build the Gulp Application:
------------------------------------

1. install the Gulp Plugin

    >npm install -g gulp


2. create the application directory structure
----------------------------
gulpdemo
    devEnv
        html
            index_one.html
            index_two.html
        css
            style_one.css
            style_two.css

        js
            sample_one.js
            sample_two.js

    package.json
    bower.json
    .bowerrc
----------------------------------

step 3:
    download the required gulp modules by using package.json

package.json
------------
{
    "name":"nareshit",
    "version":1.0.0,
    "description":"demo application",
    "devDependencies":{
        "gulp-concat":"latest",
        "gulp":"latest",
        "gulp-uglify":"latest",
        "gulp-minify-html":"latest",
        "gulp-minify-css":"latest",
        "gulp-bower":"latest"
    }
}


Step 4:
    install the gulp modules

    >npm install


Step 5:
    create the gulp script

Gulpfile.js
-----------
var concat=require("gulp-concat");     // require() function used to import the modules.
var gulp=require("gulp");
var uglify=require("gulp-uglify");
var minifyHTML=require("gulp-minify-html");
var minifyCSS=require("gulp-minify-css");
var bower=require("gulp-bower");


//create the gulp task
gulp.task("task_one",function(){
    gulp.src("./devEnv/html/*.html")
        .pipe(concat("final.min.html"))
        .pipe(minifyHTML())
        .pipe(gulp.dest("./prodEnv/html"));

});


//create the gulp task
gulp.task("task_two",function(){
    gulp.src("./devEnv/css/*.css)
        .pipe(concat("final.min.css"))
        .pipe(minifyCSS())
        .pipe(gulp.dest("./prodEnv/css"));
});


//create the gulp task
gulp.task("task_three",function(){
    gulp.src("./devEnv/js/*.js)
        .pipe(concat("final.min.js"))
        .pipe(uglify())
        .pipe(gulp.dest("./prodEnv/js"));
});


//create the task
gulp.task("task_four", function(){
    return bower();
});


//create the default task
gulp.task("default",["task_one","task_two","task_three","task_four"] , function(){

});


Step 6:
    Execute the gulp script

> gulp



AngularJS ??

    - AngularJS is the client side javascript framework.

    - angularjs follows the MVC Design pattern.

        M - Model

            Ex. javascript variables called as model in angularjs
                var data = "Data from database soon....";

        [Note : where "data" variable called as model in angularjs]


       V - View

            - we can use HTML / HTML5 / JADE as the View in angularJS.

       C - Controller

            - javascript functions called as controllers in angularjs.

        Ex.
            function fetchData(){
                var data = "Data From MongoDB....";
            }

        [Note : fetchData() function called as controller in angularjs]


Advantages Of AngularJS:
------------------------
1. AngularJS Supports Modules (both predefined modules and custom modules).

    Module : collection of predefined javascript classes called as Module


- ngAnimate
        - this module used to develop the animations in angular application.


- ngStorage
        - this module used to work with the client side storages.
        - we have two types of storages.
            1. localStorage
            2. sessionStorage

- ngMessages
    - this module used to handle the client side form validations.

- ngRoute
    - this module used to implement the routing in single page applications.
    - ngRoute module is the deprecated module
    - now a days no project using ngRoute Module in single page applications.

- ui.router
    - this module used to implement the routing in single page application.
    - ui.router module is the 3rd party module
    - ui.router module have so many advantages compared to ngRoute Module.
    - now a days all most all projects using ui.router module while implementing the single page applications.


Ex.
develop angular application with following features.

1. Animations       (ngAnimate)
2. Validations      (ngMessages)
3. Single Page Application (ui.router)
4. Storages         (ngStorage)

index.html
----------
<!DOCTYPE html>
<html ng-app="myApp">

    //we can develop the Animations , work on storages, validations and routing

    <script src="bower_components/angular/angular.min.js"></script>
    <script>
        var app = angular.module("myApp",["ngAnimate","ngStorage","ngMessages","ui.router"]);
    </script>
</html>



2. As a angular developer we can directly work with HTML DOM.

    - DOM stands for document object model
    - in general DOM Object created by browser engine.


Ex.

    copy the data from "one div" to "another div" by using html & javascript

index.html
----------
<html>
    <div id="div_one">Hello</div>
    <div id="div_two"></div>
    <script>
        document.getElementById("div_two").innerHTML =
        document.getElementById("div_one").value;
    </script>
</html>

[Note : as a html developer we must dependent on javascript to manipulate the DOM]


Ex.
    copy the data from "one div" to "another div" by using angularjs.

index.html
----------
<html ng-app>
    <div ng-model="div_one">Hello</div>
    <div ng-bind="div_one"></div>
    <script src="bower_components/angular/angular.min.js"></script>
</html>


1. in the above sample application we have following angular directives.

    1. ng-app
    2. ng-model
    3. ng-bind

2. angular framework starts the execution from ng-app directive

3. ng-model directive internally creates the object in heap memory with application data.

4. ng-bind directive binds the "model data" to "view".


[Note : as a angular developer we will dependent on angular directives to manipulate the DOM ]


3. open source code
    - we can customize the framework accroding to application requirement.

        Ex.
            adding the new features to framework

            update the existing  features

            delete the features

                --
                --

4. AngularJS Reduces the burden on the server.
    - As a Angular Developer we can implement the business components at client side


5. two way data binding
    - angular framework supports two way data binding.

    [automatic data syncronization between model and view with the supervision of controller
     called as two way data binding]


     - in the above diagram we have following server requests


     1. http get request
     2. http delete request
     3. AJAX Call


    - As a programming languages developer, we must make above all server calls to meet application
      requirement.

    - As a angularjs / angular2 developer we can make only two server calls to meet application requirement
      because of two way data binding.

[Note : two way data binding reduces the burden on the server]






































































































































































































































































































































































































































































































































































