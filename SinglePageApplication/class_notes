Single Page Applications.

	- Loading the Target Webpages to Source WebPage without
	  Refreshing the whole source web page called as
	  Single Page Web Application.


	- Loading the Target Webpages to Source Webpage Called as
	  Routing

    - We Can Achieve the Routing in SPA By using Following     Modules

    	1.ngRoute
    	2.ui.router



Steps to Develop the Single Page Application by using ngRoute Module.


Step 1.
	Download the ngRoute Dependency by using NuGet


Step 2.
	Add the ngRoute Depenedency.

app.js
-
var app = angular.module("app",["ngRoute"]);

Step 3.
	Create the Target Templates.

------------
templates
	page_one.html
	page_two.html
------------

page_one.html
-
<h1>{{var_one}}</h1>


page_two.html
-
<h1>{{var_two}}</h1>


Step 4.
	Create the Controllers.
---------------
controllers
	page_one.js
	page_two.js
---------------

page_one.js
-
$scope.var_one = "I am from page one controller";

page_two.js
-
$scope.var_two="I am from page two controller";

Step 5.
	
	app.config(config);
	config.$inject = ["$routeProvider"];
	function config($routeProvider){
		$routeProvider.when("/page_one" , {
					templateUrl : "templates/page_one.html"
					controller  : "page_one"
		})
		.when("/page_two" , {
					templateUrl : "templates/page_two.html"
					controller  : "page_two"
		})
		.otherwise("/page_one" , {
					templateUrl : "templates/page_one.html"
					controller  : "page_one"
		});
	}


Step 6.

index.html
-
<a href="#page_one">Page_One</a>
<a href="#page_two">Page_Two</a>

<div ng-view></div>

Passing the URL Parameters by using ngRoute Module.

index.html
-
<a href="#page_one/1/hello/true">Page_One</a>
config.js
-
$routeProvider.when("/page_one/:param1/:param2/:param3",{
	templateUrl : "templates/page_one.html",
	controller : "page_one"
});

page_one.js
-
app.controller("page_one" , page_one);
page_one.$inject=["$scope" , "$routeParams"];
function page_one($scope,$routeParams){
	$scope.var_one = $routeParams.param1 +"...."+$routeParams.param2+"..."+$routeParams.param3;
}


Steps to Design the Single Page Application by using ui.router module.


1.Download the ui.router module By using NuGet Packages.

2.Add the ui.router module dependency

3.Create the Target Templates

4.Create the Controllers

5.Done the Mapping

6.Create the keys in source template

Passing The Data (URL Parameters) by using ui.router Module.
-
<a ui-sref="page_one({'id':1,'name':'Hello_1','age':20})">Page_One</a>

$stateProvider.state("page_one",{
	url:"/page_one/:id/:name/:age",
	templateUrl:"templates/page_one.html",
	controller : "page_one"
});

app.controller("page_one",page_one);
page_one.$inject=["$scope","$stateParams"];
function page_one($scope,$stateParams){
	$scope.var_one = $stateParams.id+"..."+$stateParams.name+"..."+$stateParams.age;
}

NestedRouting in ui.router module.
-

Step 1.
    Download ui.router module.

Step 2.
    Add the ui.router module depenedency.

Step 3.
    Create the Templates.
---------------
templates
    page_one.html
    page_two.html
    child_one.html
    child_two.html
---------------

page_one.html
-
<h1>{{var_one}}</h1>
<a ui-sref=".child_one">Child_One</a>
<div ui-view></div>

page_two.html
-
<h1>{{var_two}}</h1>
<a ui-sref=".child_two">Child_Two</a>
<div ui-view></div>

child_one.html
-
<h1>{{child_one}}</h1>

child_two.html
-
<h1>{{child_two}}</h1>


Step 4.

    Create the Controllers.

-------------------
controllers
    page_one.js
    page_two.js
    calc.js
    summary.js
-------------------


Step 5.

    Done the Mapping.

config.js
-

app.config(config);
config.$inject=["$stateProvider","$urlRouterProvider"];
function config($stateProvider,$urlRouterProvider){

    $stateProvider.state("page_one",{
        url:"/page_one",
        templateUrl:"templates/page_one.html",
        controller:"page_one"
    })
    .state("page_one.child_one",{
            url:"/child_one",
            templateUrl:"templates/child_one.html",
            controller:"child_one"
    })
    .state("page_two",{
            url:"/page_two",
            templateUrl:"templates/page_two.html",
            controller:"page_two"
    })
    .state("page_two.child_two",{
            url:"/child_two",
            templateUrl:"templates/child_two.html",
            controller:"child_two"
    });

    $urlRouterProvider.otherwise("/page_one");
}


Step 6.
    Create the Source Template



NamedViews in Single Page Applications.

    - Loading the Multiple Webpages at a time to the source template without refreshing called as

      Named Views in SinglePage Application with ui.router module.


 Ex.

 ----------------
 templates
    page_one.html
    page_two.html
    calc.html
    summary.html
 ----------------

 page_one.html
 -
 <h1>{{var_one}}</h1>

    <div ui-view="calc"></div>

    <div ui-view="summary"></div>



config.js
-
$stateProvider.state("page_one",{
    url:"/page_one",
    '':{
        templateUrl:"templates/page_one.html",
        controller : "page_one"
    },
    'calc@page_one':{
        templateUrl:"templates/calc.html",
        controller : "calc"
    },
    'summary@page_one':{
            templateUrl:"templates/summary.html",
            controller : "summary"
     }
});



































