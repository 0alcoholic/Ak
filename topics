1.Introduction
    What is AngularJS.
    Advantages Of AngularJS.
    Disadvantages Of AngularJS.

2.Environmental Setup.
    IDE'S - WebStrom , Ecilipse , Visual Studio
    Bower

3.Angular Applications

    1.Static Angular Application.
    2.Dynamic Angular Application.

4.Directives

    1.Predefined Directives.
        1.ng-app
        2.ng-controller
        3.ng-repeat
        4.ng-click
        5.ng-options

    2.Custom Directives

5.Services

    1.Predefined Services.
    2.Custom Services.

6.Single Page Applications

7.NodeJS

8.MongoDB / MySQL


Introduction.

    - AngularJS is a JavaScript MVC Framework.

    - M - Model (JavaScript Variables)

      V - View  (HTML / HTML5)

      C - Controller (JavaScript Functions)


Advantages Of AngularJS.

    - AngularJS Reduces the Burden on the Server by implementing the

      Business Components At Client Side By Using MVC.


Drawbacks of AngularJS.
-

    - Secuirity.


Environmental Setup.

    - The Softwares Required to develop Angular Application

      called as Environmental Setup.

1.bower.

    - Bower is a Automation tool used to download the

      Required Resources to Develop Web Application.

    - Bower is the Plugin Provided by NodeJS.

bower components.

1.bower.json

2..bowerrc.json


bower.json
-
    used to write the required resources to develop web application.
{

    "dependencies":{
        "angular" : "~1.6.0",
        "bootstrap": "~3.3.6"
    }

}

.bowerrc.json
-
    used to indicate the path for resources.
{
    "directory":"bower_components"
}



Software Installation.

1.Download and Install the NodeJS.

    website : https://nodejs.org/en/download/

    file    : node-v6.10.1-x64.msi


2.Download and Install the GIT.

    website : https://git-scm.com/download/win

    file    : Git-2.12.1-64-bit.exe



3.Download WebStrom IDE.

    website : https://www.jetbrains.com/webstorm/download/#section=windows

    file name : WebStrom-2017.1.exe

4. Add the bower plugin

    Open the Terminal in WebStrom (Alt+F12)

    Execute the Following Node Command

        npm install -g bower


Angular Framework Work Path Given By Bower.
    *****************************
    BowerDemo

        bower_components

            angular

                angular.min.js
     ***************************-

Bootstrap Framework path Given By Bower.

    *****************
    BowerDemo

        bower_components

            bootstrap

                 dist

                    bootstrap.min.css
    *****************

jQuery library path given by bower.

    *****************
    BowerDemo
        bower_components
                jquery
                    dist
                        jquery.min.js
    ******************

Angular Applications.

        - By using AngularJS We Can Create Two Types Of Angular Applications.

1.Static Angular Application

2.Dynamic Angular Application

Static Angular Application.

    - View won't interacts with controller for dynamic data

      called as Static Angular Application.

Steps to Create the Static Angular Application.


Step 1.

    download angular by using bower.


Step 2.

    Create View.

 Ex.
     index.html

<!DOCTYPE html>

<html ng-app>
    <input type="number" ng-model="model_one">
    <input type="number" ng-model="model_two">
    <h1 style="color:red" ng-bind="model_one+model_two"></h1>
    <script src="bower_components/angular/angular.min.js"></script>
</html>


Dynamic Angular Application.

    - If view interacting with the controller for dynamic data,
      then such type of Angular Application called as Dynamic Angular Application.

  Steps to Create the Dynamic Angular Application.

  1.Load the Angular Framework.

  2.Declare the logical name of Application by using ng-app directive

        [ Note . if our application is dynamic , we must give logical name of application

          by using ng-app directive.]

  3.Declare the controller by using 'ng-controller' directive.

  4.Instantiate the Module.

  5.Implement the controller.

--------------------------------------
DynamicAngularApplication

    index.html

    app.js

    controllers

        ctrl.js
----------------------------------------


Directives.

    - Directives will enhance HTML Capabilities.

    - We Have Two Types Of Directives.

        1.Predefined Directives.

        2.Custom Directives.

Predefined Directives.

    - The Directives Given by the Framework called as Predefined Directives.

1.ng-app

       - Angular Framework starts the execution from ng-app directive.

       - we can logical name for dynamic application by using ng-app directive.

       Ex.

        ng-app = "myApp"

            where myApp is the logical name of web application.

        - we can have only one ng-app per application.

        - Framework automatically identifies the ng-app directive

          and Starts the Execution , called as AutoBootstrap.

        - Running the Angular Application Forcefully without

          ng-app called as Manual Bootstrap.


2.ng-controller.

    - we can take more than one controller per web application.

    - in genaral we will declare controllers in View

        Ex.

            ng-controller="ctrl_one"

    - in genaral we will implement controllers in JavaScript.

        Ex.

            app.controller("ctrl_one",ctrl_one);

            ctrl_one.$inject=["$scope"];

            function ctrl_one($scope){

                //Logic Goes Here.
            }


3.ng-repeat.

    - used to iterate the list of elements from an collection.

Syntax.

    ng-repeat =  "iteration_variable in collection"


ng-options.

    used to populate the values to the dropdown.

    Syntax.

    <select
        ng-model="my_model"

        ng-option="  'model_value' as

                     'dropdown_value' for

                     'iteration_variable' in

                     'collection'">

    </select>

 Ex_1.

    $scope.data = ["Hello_1","Hello_2","Hello_4","Hello_4","Hello_5"];

    Dropdown - H_1  to  H_5
    my_model  - H_1  to H_5

    <select ng-model="my_model" ng-options="y as y for y in data">

 Ex_2.

   $scope.data = [  {id:1,name:'Hello_1'},
                    {id:2,name:'Hello_2'},
                    {id:3,name:'Hello_3'},
                    {id:4,name:'Hello_4'},
                    {id:5,name:'Hello_5'}
                 ];

    -----------------------
    dropdown --- H_1 to H_5

    my_model --- 1   to  5
    -----------------------

    <select ng-model="my_model" ng-options="x.id as x.name for x in data">

    -----------------------
    dropdown --- 1 to 5

    my_model --- H_1 to H_5
    -----------------------

    <select ng-model="my_model" ng-options="x.name as x.id for x in data">

    -----------------------
    dropdown --- 1 to 5

    my_model --- 1 to 5
    -----------------------

    <select ng-model="my_model" ng-options="x.id as x.id for x in data">

   -----------------------
   dropdown --- H_1 to H_5

   my_model --- H_1 to H_5
   -----------------------

   <select ng-model="my_model" ng-options="x.name as x.name for x in dta">


ng-click.

    when ever we click the user interface elements automatically

    ng-click directive executed by angular framework.

ng-dblclick.

   when ever we double click the user interface elements automatically

   ng-dblclick directive executed by angular framework.

Syntax.

    ng-click / ng-dblclick ="Expression" /
                            "user defined function" /
                            "user defined function with optional parameters"


ng-init.
    used to declare the static data in the form of a key&value pair

    each key&value pair separated with the help of ";"


ng-class-odd.

    - used to apply the css classes to the odd rows of table.

ng-class-even.

    - used to apply the css classes to the even rows of table.

Ex.
<style>
    .even{
        color:red;
    }
    .odd{
        color:green;
    }
</style>

<table>
    ---
    ---
    <tr ng-repeat = "x in emp" ng-class-odd="'odd'" ng-class-even="'even'">
            ---
            ---
            ---
    </tr>
</table>



--------------------------

Advantages.

    By using provider we can change the properties in config phase.
Ex.
       app.config(config);
       config.$inject=["my_serviceProvider"];
       function config(my_serviceProvider){

            //Change the Properties.
       }

Disadvantages.

    provider depends on $get() to return data to controllers.


Creating the Custom Service by using factory()
-

var x = function(c){

    this.y = c;

    this.fun_one = function(){
        return this.y;
    }
}






app.factory("my_service",my_service);

function my_service(){

    return new x("I am from factory").fun_one();;
}




Advantages.

    - factory() can return directly to the controllers.

    - we can create the objects to the external javascript classes.

    - As a Angular Developer we can pass data to constructors of external

      javascript classes.



Creating the custom service by using value().

Ex.

    app.value("my_service","First Value");
    app.value("my_service","Second Value");

O/P.

    Second Value
    Second Value


Creating the custom service by using constant().

Ex.

    app.constant("my_service","First Value");
    app.constant("my_service","Second Value");

O/P.

    First Value

    First Value

Creating the Custom service by using service().

app.service("my_service",my_service);

function my_service(){
    this.my_fun = function(){
        return "I am from Service";
    }
}



Predefined Services.

    - The Services Provided by framework called as Predefined Services.


1.$http.

    used to connect to servers by using http protocol.


2.$q.

    used to make the Asynchronus Calls in Angular Applications.

    used to eliminate the data redundency.

Single Page Applications.

    - Loading the Target Pages to source pages with out refreshing

      the whole source page called as SPA.

    - Loading the Target Page to Source Page Called as Routing.

    - In AngularJS we can Achieve the Routing in 2 ways.

        1.ngRoute

        2.ui.router

Steps to Design the SPA by using ngRoute Module in Visual Studio IDE.

Step 1.

    Create the ASP .NET Application in VS.

Step 2.

    Add the Angular Dependencies to the SPA_Demo Application.

Step 3.

    Add the "ngRoute" dependency to the SPA_Demo

        *********************
SPA_Demo
    Basic_ngRoute
        app.js
        ********************

var app = angular.module("app",["ngRoute"]);


Step 4.

    Create the Templates

---------------
SPA_Demo
    Basic_ngRoute
        templates
            page_one.html
            page_two.html
----------------

Step 5.

    Create the Controllers.

---------------
SPA_Demo
    Basic_ngRoute
        controllers
            page_one.js
            page_two.js
----------------


Step 6.

    Done the Mapping in config phase.

config.js
-

app.config(config);

config.$inject = ["$routeProvider"];

function config($routeProvider){
    $routeProvider
    .when("/page_one",{
        templateUrl:"templates/page_one.html",
        controller:"page_one"
    })
    .when("/page_two",{
            templateUrl:"templates/page_two.html",
            controller:"page_two"
    })
    .otherwise("/page_one",{
            templateUrl:"templates/page_one.html",
            controller:"page_one"
    });
}


Step 7.

    Create the keys in main template (source template)

index.html
-
<html ng-app="app">

    <a href="#page_one">Page_One</a>
    <a href="#page_two">Page_Two</a>

    <div ng-view>

    </div>
</html>




























