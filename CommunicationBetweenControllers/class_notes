in angularjs, we can provide the communicate between controllers in four ways.

1. broadcast

2. emit

3. rootScope

4. custom services


broadcast:
    - sharing the data from parent controllers to child controllers called as broadcast communication.


syntax.


parent_controller.js
--------------------
$scope.$broadcast("key1","I am from broadcast");


child_controller.js
-------------------
$scope.$on("key1",function(event,res){
    console.log(res);   //I am from broadcast
});


Ex_1:
----

<div ng-controller="parent_controller">
    <input type="text" ng-model="model_one"> <br><br>
    <input type="text" ng-model="model_two"> <br><br>
    <button ng-click="clickMe({'key1':model_one,'key2':model_two})">ClickMe</button>

    <div ng-controller="child_controller">
        {{child}}

        <div ng-controller="sub_controller">
            {{sub}}
        </div>

    </div>
</div>

parent_controller.js
--------------------

$scope.clickMe = function(obj){
    $scope.$broadcast("demo",obj);
}

child_controller.js
-------------------
$scope.$on("demo",function(event,res){
    $scope.child = res.key1;
});

sub_controller.js
-----------------
$scope.$on("demo",function(event,res){
    $scope.sub = res.key2;
});


emit:
    sharing the data from child controllers to parent controllers called as emit communication.

Syntax.

child_controller.js
-------------------
$scope.$emit("key1","For Parent Controller");

parent_controller.js
--------------------
$scope.$on("key1" , function(event,res){
    console.log(res);   //For Parent Controller
});


Ex.
<div ng-controller="parent_controller">
    {{parent}}
    <div ng-controller="child_controller">
        <input type="text" ng-model="model_one"><br>
        <button ng-click="clickMe(model_one)">ClickMe</button>
    </div>
</div>

child_controller.js
-------------------
$scope.clickMe = function(arg1){
    $scope.$emit("demo",arg1);
}

parent_controller.js
--------------------
$scope.$on("demo",function(event,res){
    $scope.parent = res;
});

communication between controllers by using rootScope
----------------------------------------------------
Ex.

<div ng-controller="ctrl_one">
    <input type="text" ng-model="model_one"> <br><br>
    <button ng-click="clickMe(model_one)">ClickMe</button>
</div>


<div ng-controller="ctrl_two">
    <h1>{{var_one}}</h1>
</div>


ctrl_one.js
-----------
$scope.clickMe = function(arg1){
    $scope.my_fun(arg1);
}

ctrl_two.js
-----------
$rootScope.my_fun = function(arg1){
    $scope.var_one = arg1;
}


communication between controllers by using custom services:
-----------------------------------------------------------

my_service.js
-------------

app.service("my_service",my_service);
function my_service(){
    this.my_var="";

    this.setData = function(arg1){
        this.my_var=arg1;
    }

    this.getData = function(){
        return this.my_var;
    }
}


view_one.html
-------------
<div ng-controller="ctrl_one">
    <input type="text" ng-model="model_one"><br><br>
    <button ng-click="clickMe(model_one)">Set Data</button>
</div>


ctrl_one.js
-----------
app.controller("ctrl_one",ctrl_one);
function ctrl_one($scope,my_service){
    $scope.clickMe = function(arg1){
        my_service.setData(arg1);
    }
}


view_two.html
-------------
<div ng-controller="ctrl_two">
    <button ng-click="clickMe()">Get Data</button>
    <h1>{{var_one}}
</div>


ctrl_two.js
-----------
app.controller("ctrl_two",ctrl_two);
function ctrl_two($scope,my_service){
    $scope.var_one = my_service.getData();
}


index.html
----------
<html ng-app="app">
    <div ng-include="'view_one.html'"></div>
    <div ng-include="'view_two.html'"></div>
</html>
