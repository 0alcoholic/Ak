- Services are used to maintain the "common business logic"

- Services are used to share the "Services" to the Controllers.

- By using Services we Can Achieve the Code Reusability.

- It's Recomended to Maintain the Business Logic in Services.

- We Have Two Types of Services.

    1.Custom Services.

    2.Predefined Services.


Custom Services.

    - The Services Developed By Developer Based on Application Requirement Called as
      Custom Services.

    - In AngularJS We Can Create Custom Services in five ways.

        1.factory()
        2.provider()
        3.value()
        4.constant()
        5.service()


Creating the Custom Service By using factory().
-

Ex.
    app.factory("my_service",my_service);
    function my_service(){
        return new my_class("Data From Server Soon...").my_fun();
    }

            *************************
    var my_class = function(arg1){
        this.my_fun = function(){
            return arg1;
        }
    }
           ***************************

    app.controller("ctrl_one",ctrl_one);
    ctrl_one.$inject=["$scope","my_service"];
    function ctrl_one($scope,my_service){
        $scope.var_one = my_service;
    }

    app.controller("ctrl_two",ctrl_two);
    ctrl_two.$inject=["$scope","my_service"];
    function ctrl_two($scope,my_service){
         $scope.var_two = my_service;
    }


Creating the Custom Service by using provider().

    - used to change the properties values in configuration phase.

    - provider will dependent on "$get" predefined function to return services
      to the controllers.



Ex.
        app.provider("my_service",my_service);

        function my_service(){
            this.db_password="root_one";
            this.$get = function(){
                return this.db_password;
            }
        }


        app.config(config);
        function config(my_serviceProvider){
            my_serviceProvider.db_password="root_two";
        }


Creating the Custom Service by using value().
-
    - we can create the Custom Services in the form of a "key&value" pairs.

Ex.

   app.value("my_service","First Value");
   app.value("my_service","Second Value");

O/P:
    Second Value.
    Second Value.

[ Note. latest value overridden with old value ]


Creating the Custom Service by using constant().
-

    - we can create the custom services in the form of a "key & value pairs".

Ex.

    app.constant("my_service","First Value");
    app.constant("my_service","Second Value");

O/P:
    First Value.
    First Value.

[ Note. overriding won't happen in constant() ]


Creating the Custom Service By using service()
-
    - service() will dependent on user defined functions to return the values to the controllers.

Ex.

    app.service("my_service",my_service);
    function my_service(){
        this.fun_one = function(){
            return "Data From MongoDB....";
        }
        this.fun_two = function(){
            return "Data From Hadoop With Spark Interface";
        }
    }


Predefined Services.

    - The Services Given by the Framework called as Predefined Services.

1. $http
    - used to connect with servers by using http protocol.


NodeJS.
-
    - NodeJS is the Server Side Scripting Language.
    - By using NodeJS We Can Create WebServers.
    - In NodeJS "Application" itself Behaves like "Server" as well as "Business Component".
    - As a Node Developer we can assign the port numbers to the server.

Modules in NodeJS.

1.mysql
    - used to interact with the mysql database.

2.mongodb
    - used to interact with the mongodb.

3.fs
     - fs stands for "file system"
     - used to interact with the static files.

4.http
    - used to create the http servers.

5.express
    - used to develop the REST API.

6.jwt-simple
    - used to maintain the token based authenication system.

7.body-parser
    - used to set the MIME Type.
    Ex.
        json
        xml
        text
        doc
        docx
        html
        --
        --
        --
































