
    - Services in angularjs, used to share the common business logic to controllers.

    - we have two types of services

        1.predefined services.

        2.custom services.

predefined services:
-
    - the services given by the framework called as predefined services.

1. $http

2. $q

3. $timeout

4. $interval

5. $location


custom services
-

    - the services developed by us based on application requirement called as custom services.

    - in angularjs , we can create the custom services by using following predefined functions.

        1. factory()

        2. service()

        3. provider()

        4. value()

        5. constant()


creating the custom service by using factory()
-----------------------------------------------
Ex.

    function my_class(arg1){
            this.var_one = arg1;
            this.my_fun = function(){
                return this.var_one;
           }
    }


            *************************
    app.factory("my_service",my_service);
    function my_service(){
        return new my_class("Data from MongoDB....").my_fun();
    }
            ***********************



            ********************

    app.controller("ctrl_one",ctrl_one);
    function ctrl_one($scope,my_service){
        $scope.var_one = my_service;
    }
            *********************

            ************************
    app.controller("ctrl_two",ctrl_two);
    function ctrl_two($scope,my_service){
        $scope.var_two = my_service;
    }
            ************************


----------------------------------
factoryExample

    bower.json
    .bowerrc
    index.html
    app.js
    controllers
        ctrl_one.js
        ctrl_two.js
    services
        my_service.js

    js
        my_class.js

-----------------------------------


creating the custom service by using service()
-
Ex.
    app.service("my_service",my_service);
    function my_service(){
        this.fun_one = function(){
            return "For Controller One...";
        }
        this.fun_two = function(){
            return "For Controller Two...";
        }
    }

    app.controller("ctrl_one",ctrl_one);
    function ctrl_one($scope,my_service){
        $scope.var_one = my_service.fun_one();
    }


    app.controller("ctrl_two",ctrl_two);
    function ctrl_two($scope,my_service){
        $scope.var_two = my_service.fun_two();
    }

    [Note : service() depending on "user defined functions" to provide the "services" to "controllers"]


Creating the Custom Service by using provider()
-----------------------------------------------

app.config(config);
function config(my_serviceProvider){
    my_serviceProvider.db_password="root_two";
}

app.provider("my_service",my_service);
function my_service(){
    this.db_password="root_one";
    this.$get = function(){
        return this.db_password;
    }
}

- provider depending on "$get" function to provide the services to the controllers.

- "$get" have the capability to handle the config phase changes.

- by using provider we can change the properties without effecting the "front end application".




Creating the Custom Service by using value()
--------------------------------------------
Ex.
    app.value("my_service","First_value");
    app.value("my_service","Second_value");

    - we can create custom service in the form of "key&value" pairs
    - value() will take the latest value of the service (overriding will happen)



Creating the Custom Service by using constant()
-----------------------------------------------
Ex.
    app.constant("my_service","First_value");
    app.constant("my_service","Second_value");

    - we can create custom service in the form of "key&value" pairs
    - constant() will take the initilization value of the service (overriding won't happen)




Predefined Services
-
    - The Services Provided by the framework called as Predefined Services.


1.$http
2.$q
3.$timeout
4.$interval
5.$location


$http.

    - this predefined services used to interact with the servers by using http protocol.

my_service.js
-
app.service("my_service",my_service);
function my_service($http){
    this.getData = function(){
        return $http.get("https://www.w3schools.com/angular/customers.php").then(function(posRes){
            return posRes;
        },function(errRes){
            return errRes;
        });
    }
}


ctrl.js
-
app.controller("ctrl",ctrl);
function ctrl($scope,my_service){
    my_service.getData().then(function(res){
        $scope.result = res;
    });
}


index.html
-
<h1>{{result}}</h1>


Ex_2.

    http post example
    URL : http://test-routes.herokuapp.com/test/uppercase




$q.
-
    - it is a predefined service in angularjs.
    - this service used to make the asynchronus calles.
    - this service used to eliminate the data redundency.

 Ex.
            //Making the Async Call
            var deffered_one = $q.defer();
            this.fun_one = function () {
                return $http.get("http://demosoft.highgrowth.in/test/jsonexample.php")
                                    .then(function (posRes) {
                    deffered_one.resolve(posRes);
                    return deffered_one.promise;
                },function (errRes) {
                    deffered_one.reject(errRes);
                    return deffered_one.promise;
                });
            };

             //Deleting the Duplicate Code
             $q.all([my_service.fun_one(),my_service.fun_two()]).then(function (res) {
                    $scope.var_one = res[0];
                    $scope.var_two = res[1];
             });


3.$timeout

        - this predefined service used to execute a "custom function" with a given time.

Ex.

    $timeout(fun_one,5000);

    function fun_one(){
        alert("Session Time Out !");
    }

    [Note : fun_one will execute after 5 sec]


4. $interval

        - this predefined used to execute a "custom function repeatedely" with a given interval of time

Ex.
        $interval(fun_two , 5000);

        function fun_two(){
            //Logic Goes Here
        }

        [Note : fun_two will execute repetedely for every 5 sec]


5. $location.

        - this predefined service used to find the absolute path of web application.

Ex.
        $scope.path = $location.absUrl();

