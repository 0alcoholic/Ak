Services:
    - Services are used to share the common business logic to multiple number of controllers.

    - by using services we can reuse the business logic.

    - we have two types of services

        1. predefined services

        2. custom services


predefined services:

    - the services given by the framework called as predefined services.

Ex.
    $http

    $q

    $timeout

    $interval

    $location

custom services:

    - creating our own service based on application requirement called as
      custom service.

    - in angularjs, we can create custom services in 5 ways.

        1. factory()

        2. service()

        3. provider()

        4. value()

        5. constant()


creating the custom service by using factory()
----------------------------------------------

app.factory("my_service",my_service);
function my_service(){
    return "Data From MongoDB Soon...";
}


app.controller("ctrl_one",ctrl_one);
function ctrl_one($scope,my_service){
    $scope.var_one = my_service;
}


app.controller("ctrl_two",ctrl_two);
function ctrl_two($scope,my_service){
    $scope.var_two = my_service;
}


creating the custom service by using service()
----------------------------------------------

    - service() function used to create the custom services.

    - service() depending on user defined functions to provide services to
      the controllers


Ex.
    app.service("my_service",my_service);

    function my_service(){

        this.fun_one = function(){
            return "Data From MySQL Soon....";
        }

        this.fun_two = function(){
            return "Data From MongoDB Soon....";
        }
    }



    app.controller("ctrl_one",ctrl_one);
    function ctrl_one($scope,my_service){
        $scope.var_one = my_service.fun_one();
    }


    app.controller("ctrl_two",ctrl_two);
    function ctrl_two($scope,my_service){
        $scope.var_two = my_service.fun_two();
    }


creating the custom service by using value()
--------------------------------------------

    - we can create the custom service in the form of a "key" & "value" pairs.

Ex.

    app.value("my_service" , "First Value");
    app.value("my_service" , "Second Value");


    app.controller("ctrl_one",ctrl_one);
    function ctrl_one($scope,my_service){
         $scope.var_one = my_service;
    }


    app.controller("ctrl_two",ctrl_two);
    function ctrl_two($scope,my_service){
          $scope.var_two = my_service;
    }

    O/P :  Second Value

           Second Value

[Note : overriding will be happen in value()]



creating the custom service by using constant()
-----------------------------------------------
    - we can create the custom service in the form of a "key" & "value" pairs.
Ex.
    app.constant("my_service" , "First Value");
    app.constant("my_service" , "Second Value");

    app.controller("ctrl_one",ctrl_one);
    function ctrl_one($scope,my_service){
         $scope.var_one = my_service;
    }

    app.controller("ctrl_two",ctrl_two);
    function ctrl_two($scope,my_service){
          $scope.var_two = my_service;
    }

    O/P :  First Value

           First Value

[Note : overriding won't  happen in constant()]


creating the custom service by using provider()
-----------------------------------------------

    - provider() depending on "$get" to provide the services to the controllers.

    - "$get()" is the predefined function in angularjs.


Ex.





    app.provider("my_service",my_service);
    function my_service(){
        this.db_password="root_one";
        this.$get = function(){
            return this.db_password;
        }
    }

    app.config(config);
    function config(my_serviceProvider){
        my_serviceProvider.db_password="root_two";
    }

    app.controller("ctrl_one",ctrl_one);
    function ctrl_one($scope,my_service){
        $scope.var_one = my_service;
    }

    app.controller("ctrl_two",ctrl_two);
    function ctrl_two($scope,my_service){
          $scope.var_two = my_service;
    }


Predefined Services:

1. $http
    - this service used to connect with the servers by using http protocol.

my_service.js
-------------
app.service("my_service",my_service);
function my_service($http){
    this.getData = function(){
        return $http.get("https://www.w3schools.com/angular/customers.php")
            .then(function(posRes){
                return posRes;
            },function(errRes){
                return errRes;
            });
    }
}


ctrl.js
-------
app.controller("ctrl",ctrl);
function ctrl($scope,my_service){
    my_service.getData().then(function(res){
        $scope.result = res;
    });
};



URL_1 : http://demosoft.highgrowth.in/test/jsonexample.php

URL_2 : http://test-routes.herokuapp.com/test/hello

$q:
    - $q is the predefined service in angularjs

    - by using $q, we can overcome the data redundancy.

    Ex.
        $q.all([my_service.fun_one(),my_service.fun_two()]).then(function(res){
            $scope.var_one = res[0];
            $scope.var_two = res[1];
        });

    - by using $q, we can make async calls

    Ex.
         var deffered_one = $q.defer();
         this.fun_one = function () {
             return $http.get("http://demosoft.highgrowth.in/test/jsonexample.php").then(function (posRes) {
                   deffered_one.resolve(posRes);
                   return deffered_one.promise;
              },function (errRes) {
                 deffered_one.reject(errRes);
                 return deffered_one.promise;
              });
         };


$timeout:
---------
    - this service used to execute a custom function with a given timer.

Ex
    $timeout(fun_one,5000);
    function fun_one(){
        //Business Logic
    }

[Note : fun_one will execute after 5000ms (5sec)]


$interval:
----------
    - this service used to execute a custom function repetedely with a given interval of time.

Ex.
    $interval(fun_two,1000);
    function fun_two(){
        //Business Logic.
    }

$location:
----------
    - this service used to find the absolute path of web application.

Ex.
    $scope.var_one = $location.absUrl();











































