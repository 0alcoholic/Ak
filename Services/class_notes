Services:
    - Services are used to provide the common services to multiple
      Controllers.

    - We have two types of services.

        1. predefined services

        2. custom services

Predefined Services:

    - The Services Given by framework called as Predefined Services.

        1. $http
        2. $q
        3. $timeout
        4. $interval
        5. $location


Custom Services:

    - The Services Developed by developer based on Application Requirement
      Called as Custom Services.

    - In AngularJS, we can create Custom Services in five ways.

        1. factory()
        2. service()
        3. provider()
        4. value()
        5. constant()


Creating the Custom Service by using factory()
----------------------------------------------
function my_class(arg1,arg2,arg3){
    this.my_fun = function(){
        return arg1+"<==>"+arg2+"<==>"+arg3;
    }
}

app.factory("my_service",my_service);
function my_service(){
    return new my_class("AngularJS","NodeJS","MongoDB").my_fun();
}

app.controller("ctrl_one",ctrl_one);
function ctrl_one($scope,my_service){
    $scope.var_one = my_service;
}

app.controller("ctrl_two",ctrl_two);
function ctrl_two($scope,my_service){
    $scope.var_two = my_service;
}


creating the custom service by using service()
----------------------------------------------
    - service() depending on "user defined functions" (Custom Functions)
      to provide the services to controllers.


app.service("my_service",my_service);
function my_service(){
    this.fun_one = function(){
        return "For Controller One !";
    }
    this.fun_two = function(){
        return "For Controller Two !";
    }
}

app.controller("ctrl_one",ctrl_one);
function ctrl_one($scope,my_service){
    $scope.var_one = my_service.fun_one();
}


app.controller("ctrl_two",ctrl_two);
function ctrl_two($scope,my_service){
    $scope.var_two = my_service.fun_two();
}


creating the custom service by using value()
--------------------------------------------
    - we can create the custom service in the form of a "key&value" pairs
      by using value()


Ex.
    app.value("my_service","First Value");
    app.value("my_service","Second Value");

    app.controller("ctrl_one",ctrl_one);
    function ctrl_one($scope,my_service){
        $scope.var_one = my_service;
    }

    app.controller("ctrl_two",ctrl_two);
    function ctrl_two($scope,my_service){
        $scope.var_two = my_service;
    }

O/P:
    Second Value
    Second Value


creating the custom service by using constant()
--------------------------------------------
    - we can create the custom service in the form of a "key&value" pairs
      by using constant()


Ex.
    app.constant("my_service","First Value");
    app.constant("my_service","Second Value");

    app.controller("ctrl_one",ctrl_one);
    function ctrl_one($scope,my_service){
        $scope.var_one = my_service;
    }

    app.controller("ctrl_two",ctrl_two);
    function ctrl_two($scope,my_service){
        $scope.var_two = my_service;
    }

O/P:
    First Value
    First Value


creating the custom service by using provider()
-----------------------------------------------

    - provider() depending on "$get" to provide services to controllers.

    - "$get" is the predefined function in angularjs.

    - provider() have the capability to interact with config phase.

    - config() is the predefined function and executes in boot time.


app.provider("my_service",my_service);
function my_service(){
    this.db_password="root_one";
    this.$get = function(){
        return this.db_password;
    }
}


app.config(config);
function config(my_serviceProvider){
    my_serviceProvider.db_password = "root_two !";
}



/////////////////////////////////////////////

predefined services:
--------------------
1. $http
    - this predefined service used to interact with the servers by using
      http protocol.


Ex.
app.service("my_service",my_service);
function my_service($http){
    this.getData = function(){
        return $http.get("https://www.w3schools.com/angular/customers.php")
            .then(function(posRes){
            return posRes;
        },function(errRes){
            return errRes;
        });
    }
}


app.controller("ctrl",ctrl);
function ctrl($scope,my_service){
  my_service.getData().then(function(res){
    $scope.result = res;
  });
};


Ex_2:
    POST URL: http://test-routes.herokuapp.com/test/uppercase

app.service("my_service",my_service);
function my_service($http){
    this.getData = function(obj){
        return $http.post("http://test-routes.herokuapp.com/test/uppercase",obj)
            .then(function(posRes){
                return posRes;
        },function(errRes){
              return errRes;
        });
    };
}

app.controller("ctrl",ctrl);
function ctrl($scope,my_service){
    $scope.clickMe = function(obj){
        my_service.getData(obj).then(function(res){
            $scope.result = res;
        });
    };
};

<input type="text" ng-model="my_model">
<button ng-click="clickMe({'message':my_model})">ClickMe</button>
<h1>{{result}}</h1>



Ex_3:

app.service("my_service",my_service);
function my_service($http){
    this.fun_one = function(){
        return $http.get("http://demosoft.highgrowth.in/test/jsonexample.php")
            .then(function(posRes){
                return posRes;
        },function(errRes){
                return errRes;
        });
    }

    this.fun_two = function(){
        return $http.get("http://test-routes.herokuapp.com/test/hello")
            .then(function(posRes){
                return posRes;
            },function(errRes){
                return errRes;
            });
    };
}


app.controller("ctrl",ctrl);
function ctrl($scope,my_service){

    my_service.fun_one().then(function(res){
        $scope.var_one = res;
    });

    my_service.fun_two().then(function(res){
        $scope.var_two = res;
    });

}


$q:
--
    - $q is the predefined service in angularjs.

    - $q used to overcome the data redundancy.

    Ex.

    $q.all([my_service.fun_one(),my_service.fun_two()])
                    .then(function (res) {
                $scope.var_one = res[0];
                $scope.var_two = res[1];
    });

    - $q used to make the async calls.

    //starting async call
    var deffered_one = $q.defer();
    this.fun_one = function () {

       return $http.get("http://demosoft.highgrowth.in/test/jsonexample.php")
                .then(function (posRes) {

            //success call back to async call
            deffered_one.resolve(posRes);

            //terminating async call
            return deffered_one.promise;
       },function (errRes) {

            //failure call back to async call
            deffered_one.reject(errRes);

            //terminating async call
            return deffered_one.promise;
       });
    };



$timeout
--------
    - this predefined service used to execute a custom function
      with a given time.

Syntax.
    $timeout(fun_one,5000);

[Note : fun_one will execute after 5000ms automatically]


$interval
---------
    - this predefined service used to execute a custom function
      repetedaly with a given interval of time.


Syntax:
    $interval(fun_two,1000);

[Note : fun_two will execute for every 1 sec]


$location:
----------
    - this predefined service used to find the absolute path of web
      application.

Syntax.
    console.log($location.absUrl());

















