Services in angularjs, shares the common business logic to multiple number of controllers.

By using Services we can reuse the Business Logic.

We have Two Types Of Services.

    1. predefined services

    2. custom services


predefined services:

    - the services provided by framework called as predefined services.

1. $http

2. $q

3. $timeout

4. $interval

5. $location


custom services:

    - the services developed by developer called as custom services

    - In angularJS , we can create the Custom Services in five ways.

    1. factory()

    2. service()

    3. provider()

    4. value()

    5. constant()


creating the custom service by using factory()
----------------------------------------------
function my_class(){
    this.my_fun = function(){
        return "I am from JS Class !";
    }
}

app.factory("my_service",my_service);
function my_service(){
    return new my_class().my_fun();
}

app.controller("ctrl_one",ctrl_one);
function ctrl_one($scope,my_service){
    $scope.var_one = my_service;
}

app.controller("ctrl_two",ctrl_two);
function ctrl_two($scope,my_service){
    $scope.var_two = my_service;
}

creating the custom service by using service()
----------------------------------------------

    - service() function depending on user defined functions to provide services to controllers.


app.service("my_service",my_service);


function my_service(){

    this.fun_one = function(){
        return "For Controller One !";
    }

    this.fun_two = function(){
        return "For Controller Two !";
    }
}



creating the custom service by using value()
--------------------------------------------
    - by using value() we can create the custom services in the form of a "key&value" pairs.

Ex.
    app.value("my_service","First Value");

    app.controller("ctrl_one",ctrl_one);
    function ctrl_one($scope,my_service){
        $scope.var_one = my_service;
    }

    app.controller("ctrl_two",ctrl_two);
    function ctrl_two($scope,my_service){
         $scope.var_two = my_service;
    }

    O/P:
        First value
        First Value

    Ex.
        app.value("my_service","First Value");
        app.value("my_service","Second Value");
    O/P:
        Second Value
        Second Value

[Note : overriding will be happen in value()]



Creating the Custom Service by using constant()
-----------------------------------------------

app.constant("my_service","First Value");
app.constant("my_service","Second Value");


O/P:
    First Value

[Note : overriding won't be happen in constant()]


Creating the Custom Service by using provider()
-----------------------------------------------
    - $get is the predefined function in angular framework.

    - provider() depending on "$get" function to provide the services to controllers.

Ex.

    app.provider("my_service",my_service);
    function my_service(){
        this.var_one="Hello...!";
        this.$get = function(){
            return  this.var_one;
        }
    }


    app.config(config);
    function config(my_serviceProvider){
        my_serviceProvider.var_one = "Hi.....!";
    }




Predefined Services:
--------------------
1. $timeout
    - this predefined service used to execute a "custom function" with a given time.

Syntax:
    $timeout(fun_one,5000);

[Note : fun_one will execute after 5000 ms]


2. $interval
    - this predefined service used to execute a "custom function" repetadely with a given interval
      of time.

Syntax:
    $interval(fun_two,5000);

[Note : fun_two will execute repetedely for every 5000ms]


3.$location
    - this predefined service used to find the absolute path of web application.

Ex.
    console.log($location.absUrl());

4. $http
    - this predefined service used to connect to servers by using http protocol.

Ex_1:
    app.service("my_service",my_service);
    function my_service($http){
        this.getData = function(){
            return $http.get("https://www.w3schools.com/angular/customers.php")
                    .then(function(posRes){
                return posRes;
            },function(errRes){
                return errRes;
            });
        }
    }

    app.controller("ctrl",ctrl);
    function ctrl($scope,my_service){
        my_service.getData().then(function(res){
            $scope.result = res;
        });
    };


    <h1>{{result}}</h1>


Ex_2:

    app.service("my_service",my_service);

    function my_service($http){
        this.getData = function(obj){
            return $http.post("http://test-routes.herokuapp.com/test/uppercase",obj)
                .then(function(posRes){
                return posRes;
            },function(errRes){
                return errRes;
            });
        };
    }

    app.controller("ctrl",ctrl);

    function ctrl($scope,my_service){
        $scope.clickMe = function(obj){
            my_service.getData(obj).then(function(res){
                $scope.result = res;
            });
        };
    };


    <input type="text" ng-model="my_model">
    <button ng-click="clickMe({'message':my_model})">Post Data</button>
    <h1>{{result}}</h1>




$q:
--

    - $q is the predefined service in angularjs.

    - $q used to overcome the data redundancy (duplicate code)

    Ex.
        $q.all([my_service.fun_one(),my_service.fun_two()])
                .then(function(res){
            $scope.var_one = res[0];
            $scope.var_two = res[1];
        });

    - by using $q we can make asyncronous communication calls.

    //Starting the Async Call
    var deffered_one = $q.defer();
    this.fun_one = function () {
        return $http.get("http://test-routes.herokuapp.com/test/hello").then(function (posRes) {
          //suuccss call back to async call
          deffered_one.resolve(posRes);
          //terminating the async call
          return deffered_one.promise;
         },function (errRes) {
            //err callback to async call
            deffered_one.reject(errRes);
            //terminating the async call
            return deffered_one.promise;
         });
    };








